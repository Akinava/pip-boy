 word  analogread256(byte pin)
{ 
  int adc_buff= 0;
  ADMUX =  (0 << REFS1) | (0 << REFS0) | (0 << ADLAR)  | (0 << MUX3) | (0 << MUX2)  | (0 << MUX1)  | (0 << MUX0) ;
  ADMUX = (ADMUX >> 3) << 3 | pin ;
  ADCSRA = (1 << ADEN) | (0 << ADSC) | (0 << ADATE) | (0 << ADIF) | (0 << ADIE) | (0 << ADPS2) | (1 << ADPS1) | (1 << ADPS0);
 
  for (uint8_t i = 0; i <= 3 ; i++)
  { 
  ADCSRA |= (1<<ADSC);    
  while (bit_is_set(ADCSRA,ADSC));
  adc_buff += ADCW;
  };
  return  adc_buff/4 ;
}


 int  analogread_map (byte pin,int fromLow ,int  fromHigh,int  toLow,int  toHigh)
{ 
  int adc_buff= 0;
  ADMUX =  (0 << REFS1) | (0 << REFS0) | (0 << ADLAR)  | (0 << MUX3) | (0 << MUX2)  | (0 << MUX1)  | (0 << MUX0) ;
  ADMUX = (ADMUX >> 3) << 3 | pin ;
  ADCSRA = (1 << ADEN) | (0 << ADSC) | (0 << ADATE) | (0 << ADIF) | (0 << ADIE) | (0 << ADPS2) | (1 << ADPS1) | (1 << ADPS0);
 
  for (uint8_t i = 0; i <= 3 ; i++)
  { 
  ADCSRA |= (1<<ADSC);    
  while (bit_is_set(ADCSRA,ADSC));
  adc_buff += ADCW;
  };
  return  map ( (adc_buff), fromLow*4 ,  fromHigh*4,  toLow,  toHigh) ;

  
}



void delay16 ()
{ // asm("nop") x 3 Стільки потрібно для MyBuff_ADC[і]  =  PIND ;
  asm("nop");asm("nop"); asm("nop"); asm("nop");asm("nop");
  //while ((PINB & (0b00000010)) != 0 ){;}
  // asm("nop") x 8 Стільки потрібно для повернення з підпрограми
}

void delay32 ()
{ 
  
   ADCSRA = ADCSRA | 1<<ADSC;
   asm("nop");asm("nop"); asm("nop"); 
   PORTB  = PORTB  | 1<<1;
   asm("nop");asm("nop"); // х 8
   PORTB = PORTB & ~(1<<1);
   asm("nop");
}

void delay64 ()
{ 
  
   ADCSRA = ADCSRA | 1<<ADSC;
   asm("nop");asm("nop"); 
   PORTB  = PORTB  | 1<<1;
   asm("nop"); // х 8
   PORTB = PORTB & ~(1<<1);
   asm("nop");
   delay16 ();delay16 ();delay16 ();


   
}




void LoadPin4()
{ 
  
while ((PINB & (0b00000010)) != 0 ){;}
MyBuff_ADC[  0 ]  = PIND ; asm("nop");   
MyBuff_ADC[ 1 ]  =  PIND ; asm("nop"); 
MyBuff_ADC[ 2 ]  =  PIND ; asm("nop"); 
MyBuff_ADC[ 3 ]  =  PIND ; asm("nop"); 
MyBuff_ADC[ 4 ]  =  PIND ; asm("nop"); 
MyBuff_ADC[ 5 ]  =  PIND ; asm("nop"); 
MyBuff_ADC[ 6 ]  =  PIND ; asm("nop"); 
MyBuff_ADC[ 7 ]  =  PIND ; asm("nop"); 
MyBuff_ADC[ 8 ]  =  PIND ; asm("nop"); 
MyBuff_ADC[ 9 ]  =  PIND ; asm("nop"); 
MyBuff_ADC[ 10  ]  =  PIND ; asm("nop"); 
MyBuff_ADC[ 11  ]  =  PIND ; asm("nop"); 
MyBuff_ADC[ 12  ]  =  PIND ; asm("nop"); 
MyBuff_ADC[ 13  ]  =  PIND ; asm("nop"); 
MyBuff_ADC[ 14  ]  =  PIND ; asm("nop"); 
MyBuff_ADC[ 15  ]  =  PIND ; asm("nop"); 
MyBuff_ADC[ 16  ]  =  PIND ; asm("nop"); 
MyBuff_ADC[ 17  ]  =  PIND ; asm("nop"); 
MyBuff_ADC[ 18  ]  =  PIND ; asm("nop"); 
MyBuff_ADC[ 19  ]  =  PIND ; asm("nop"); 
MyBuff_ADC[ 20  ]  =  PIND ; asm("nop"); 
MyBuff_ADC[ 21  ]  =  PIND ; asm("nop"); 
MyBuff_ADC[ 22  ]  =  PIND ; asm("nop"); 
MyBuff_ADC[ 23  ]  =  PIND ; asm("nop"); 
MyBuff_ADC[ 24  ]  =  PIND ; asm("nop"); 
MyBuff_ADC[ 25  ]  =  PIND ; asm("nop"); 
MyBuff_ADC[ 26  ]  =  PIND ; asm("nop"); 
MyBuff_ADC[ 27  ]  =  PIND ; asm("nop"); 
MyBuff_ADC[ 28  ]  =  PIND ; asm("nop"); 
MyBuff_ADC[ 29  ]  =  PIND ; asm("nop"); 
MyBuff_ADC[ 30  ]  =  PIND ; asm("nop"); 
MyBuff_ADC[ 31  ]  =  PIND ; asm("nop"); 
MyBuff_ADC[ 32  ]  =  PIND ; asm("nop"); 
MyBuff_ADC[ 33  ]  =  PIND ; asm("nop"); 
MyBuff_ADC[ 34  ]  =  PIND ; asm("nop"); 
MyBuff_ADC[ 35  ]  =  PIND ; asm("nop"); 
MyBuff_ADC[ 36  ]  =  PIND ; asm("nop"); 
MyBuff_ADC[ 37  ]  =  PIND ; asm("nop"); 
MyBuff_ADC[ 38  ]  =  PIND ; asm("nop"); 
MyBuff_ADC[ 39  ]  =  PIND ; asm("nop"); 
MyBuff_ADC[ 40  ]  =  PIND ; asm("nop"); 
MyBuff_ADC[ 41  ]  =  PIND ; asm("nop"); 
MyBuff_ADC[ 42  ]  =  PIND ; asm("nop"); 
MyBuff_ADC[ 43  ]  =  PIND ; asm("nop"); 
MyBuff_ADC[ 44  ]  =  PIND ; asm("nop"); 
MyBuff_ADC[ 45  ]  =  PIND ; asm("nop"); 
MyBuff_ADC[ 46  ]  =  PIND ; asm("nop");  
MyBuff_ADC[ 47  ]  =  PIND ; asm("nop"); 
MyBuff_ADC[ 48  ]  =  PIND ; asm("nop"); 
MyBuff_ADC[ 49  ]  =  PIND ; asm("nop"); 
MyBuff_ADC[ 50  ]  =  PIND ; asm("nop"); 
MyBuff_ADC[ 51  ]  =  PIND ; asm("nop"); 
MyBuff_ADC[ 52  ]  =  PIND ; asm("nop"); 
MyBuff_ADC[ 53  ]  =  PIND ; asm("nop"); 
MyBuff_ADC[ 54  ]  =  PIND ; asm("nop"); 
MyBuff_ADC[ 55  ]  =  PIND ; asm("nop"); 
MyBuff_ADC[ 56  ]  =  PIND ; asm("nop"); 
MyBuff_ADC[ 57  ]  =  PIND ; asm("nop"); 
MyBuff_ADC[ 58  ]  =  PIND ; asm("nop"); 
MyBuff_ADC[ 59  ]  =  PIND ; asm("nop"); 
MyBuff_ADC[ 60  ]  =  PIND ; asm("nop"); 
MyBuff_ADC[ 61  ]  =  PIND ; asm("nop"); 
MyBuff_ADC[ 62  ]  =  PIND ; asm("nop"); 
MyBuff_ADC[ 63  ]  =  PIND ; asm("nop"); 
MyBuff_ADC[ 64  ]  =  PIND ; asm("nop");  
MyBuff_ADC[ 65  ]  =  PIND ; asm("nop"); 
MyBuff_ADC[ 66  ]  =  PIND ; asm("nop"); 
MyBuff_ADC[ 67  ]  =  PIND ; asm("nop"); 
MyBuff_ADC[ 68  ]  =  PIND ; asm("nop"); 
MyBuff_ADC[ 69  ]  =  PIND ; asm("nop"); 
MyBuff_ADC[ 70  ]  =  PIND ; asm("nop"); 
MyBuff_ADC[ 71  ]  =  PIND ; asm("nop"); 
MyBuff_ADC[ 72  ]  =  PIND ; asm("nop"); 
MyBuff_ADC[ 73  ]  =  PIND ; asm("nop"); 
MyBuff_ADC[ 74  ]  =  PIND ; asm("nop"); 
MyBuff_ADC[ 75  ]  =  PIND ; asm("nop"); 
MyBuff_ADC[ 76  ]  =  PIND ; asm("nop"); 
MyBuff_ADC[ 77  ]  =  PIND ; asm("nop"); 
MyBuff_ADC[ 78  ]  =  PIND ; asm("nop"); 
MyBuff_ADC[ 79  ]  =  PIND ; asm("nop"); 
MyBuff_ADC[ 80  ]  =  PIND ; asm("nop"); 
MyBuff_ADC[ 81  ]  =  PIND ; asm("nop"); 
MyBuff_ADC[ 82  ]  =  PIND ; asm("nop"); 
MyBuff_ADC[ 83  ]  =  PIND ; asm("nop"); 
MyBuff_ADC[ 84  ]  =  PIND ; asm("nop"); 
MyBuff_ADC[ 85  ]  =  PIND ; asm("nop"); 
MyBuff_ADC[ 86  ]  =  PIND ; asm("nop"); 
MyBuff_ADC[ 87  ]  =  PIND ; asm("nop"); 
MyBuff_ADC[ 88  ]  =  PIND ; asm("nop"); 
MyBuff_ADC[ 89  ]  =  PIND ; asm("nop"); 
MyBuff_ADC[ 90  ]  =  PIND ; asm("nop"); 
MyBuff_ADC[ 91  ]  =  PIND ; asm("nop"); 
MyBuff_ADC[ 92  ]  =  PIND ; asm("nop"); 
MyBuff_ADC[ 93  ]  =  PIND ; asm("nop"); 
MyBuff_ADC[ 94  ]  =  PIND ; asm("nop"); 
MyBuff_ADC[ 95  ]  =  PIND ; asm("nop"); 
MyBuff_ADC[ 96  ]  =  PIND ; asm("nop"); 
MyBuff_ADC[ 97  ]  =  PIND ; asm("nop"); 
MyBuff_ADC[ 98  ]  =  PIND ; asm("nop"); 
MyBuff_ADC[ 99  ]  =  PIND ; asm("nop"); 
MyBuff_ADC[ 100 ]  =  PIND ; asm("nop"); 
MyBuff_ADC[ 101 ]  =  PIND ; asm("nop"); 
MyBuff_ADC[ 102 ]  =  PIND ; asm("nop"); 
MyBuff_ADC[ 103 ]  =  PIND ; asm("nop"); 
MyBuff_ADC[ 104 ]  =  PIND ; asm("nop"); 
MyBuff_ADC[ 105 ]  =  PIND ; asm("nop"); 
MyBuff_ADC[ 106 ]  =  PIND ; asm("nop"); 
MyBuff_ADC[ 107 ]  =  PIND ; asm("nop"); 
MyBuff_ADC[ 108 ]  =  PIND ; asm("nop"); 
MyBuff_ADC[ 109 ]  =  PIND ; asm("nop"); 
MyBuff_ADC[ 110 ]  =  PIND ; asm("nop"); 
MyBuff_ADC[ 111 ]  =  PIND ; asm("nop"); 
MyBuff_ADC[ 112 ]  =  PIND ; asm("nop"); 
MyBuff_ADC[ 113 ]  =  PIND ; asm("nop"); 
MyBuff_ADC[ 114 ]  =  PIND ; asm("nop"); 
MyBuff_ADC[ 115 ]  =  PIND ; asm("nop"); 
MyBuff_ADC[ 116 ]  =  PIND ; asm("nop"); 
MyBuff_ADC[ 117 ]  =  PIND ; asm("nop"); 
MyBuff_ADC[ 118 ]  =  PIND ; asm("nop"); 
MyBuff_ADC[ 119 ]  =  PIND ; asm("nop"); 
MyBuff_ADC[ 120 ]  =  PIND ; asm("nop"); 
MyBuff_ADC[ 121 ]  =  PIND ; asm("nop"); 
MyBuff_ADC[ 122 ]  =  PIND ; asm("nop"); 
MyBuff_ADC[ 123 ]  =  PIND ; asm("nop"); 
MyBuff_ADC[ 124 ]  =  PIND ; asm("nop"); 
MyBuff_ADC[ 125 ]  =  PIND ; asm("nop"); 
MyBuff_ADC[ 126 ]  =  PIND ; asm("nop"); 
MyBuff_ADC[ 127 ]  =  PIND ; asm("nop"); 
MyBuff_ADC[ 128 ]  =  PIND ; asm("nop"); 
MyBuff_ADC[ 129 ]  =  PIND ; asm("nop"); 
MyBuff_ADC[ 130 ]  =  PIND ; asm("nop"); 
MyBuff_ADC[ 131 ]  =  PIND ; asm("nop"); 
MyBuff_ADC[ 132 ]  =  PIND ; asm("nop"); 
MyBuff_ADC[ 133 ]  =  PIND ; asm("nop"); 
MyBuff_ADC[ 134 ]  =  PIND ; asm("nop"); 
MyBuff_ADC[ 135 ]  =  PIND ; asm("nop"); 
MyBuff_ADC[ 136 ]  =  PIND ; asm("nop"); 
MyBuff_ADC[ 137 ]  =  PIND ; asm("nop"); 
MyBuff_ADC[ 138 ]  =  PIND ; asm("nop"); 
MyBuff_ADC[ 139 ]  =  PIND ; asm("nop"); 
MyBuff_ADC[ 140 ]  =  PIND ; asm("nop"); 
MyBuff_ADC[ 141 ]  =  PIND ; asm("nop"); 
MyBuff_ADC[ 142 ]  =  PIND ; asm("nop"); 
MyBuff_ADC[ 143 ]  =  PIND ; asm("nop"); 
MyBuff_ADC[ 144 ]  =  PIND ; asm("nop"); 
MyBuff_ADC[ 145 ]  =  PIND ; asm("nop"); 
MyBuff_ADC[ 146 ]  =  PIND ; asm("nop"); 
MyBuff_ADC[ 147 ]  =  PIND ; asm("nop"); 
MyBuff_ADC[ 148 ]  =  PIND ; asm("nop"); 
MyBuff_ADC[ 149 ]  =  PIND ; asm("nop"); 
MyBuff_ADC[ 150 ]  =  PIND ; asm("nop"); 
MyBuff_ADC[ 151 ]  =  PIND ; asm("nop"); 
MyBuff_ADC[ 152 ]  =  PIND ; asm("nop"); 
MyBuff_ADC[ 153 ]  =  PIND ; asm("nop"); 
MyBuff_ADC[ 154 ]  =  PIND ; asm("nop"); 
MyBuff_ADC[ 155 ]  =  PIND ; asm("nop"); 
MyBuff_ADC[ 156 ]  =  PIND ; asm("nop"); 
MyBuff_ADC[ 157 ]  =  PIND ; asm("nop"); 
MyBuff_ADC[ 158 ]  =  PIND ; asm("nop"); 
MyBuff_ADC[ 159 ]  =  PIND ; asm("nop"); 
MyBuff_ADC[ 160 ]  =  PIND ; asm("nop"); 
MyBuff_ADC[ 161 ]  =  PIND ; asm("nop"); 
MyBuff_ADC[ 162 ]  =  PIND ; asm("nop"); 
MyBuff_ADC[ 163 ]  =  PIND ; asm("nop"); 
MyBuff_ADC[ 164 ]  =  PIND ; asm("nop"); 
MyBuff_ADC[ 165 ]  =  PIND ; asm("nop"); 
MyBuff_ADC[ 166 ]  =  PIND ; asm("nop"); 
MyBuff_ADC[ 167 ]  =  PIND ; asm("nop"); 
MyBuff_ADC[ 168 ]  =  PIND ; asm("nop"); 
MyBuff_ADC[ 169 ]  =  PIND ; asm("nop"); 
MyBuff_ADC[ 170 ]  =  PIND ; asm("nop"); 
MyBuff_ADC[ 171 ]  =  PIND ; asm("nop"); 
MyBuff_ADC[ 172 ]  =  PIND ; asm("nop"); 
MyBuff_ADC[ 173 ]  =  PIND ; asm("nop"); 
MyBuff_ADC[ 174 ]  =  PIND ; asm("nop"); 
MyBuff_ADC[ 175 ]  =  PIND ; asm("nop"); 
MyBuff_ADC[ 176 ]  =  PIND ; asm("nop"); 
MyBuff_ADC[ 177 ]  =  PIND ; asm("nop"); 
MyBuff_ADC[ 178 ]  =  PIND ; asm("nop"); 
MyBuff_ADC[ 179 ]  =  PIND ; asm("nop"); 
MyBuff_ADC[ 180 ]  =  PIND ; asm("nop"); 
MyBuff_ADC[ 181 ]  =  PIND ; asm("nop"); 
MyBuff_ADC[ 182 ]  =  PIND ; asm("nop"); 
MyBuff_ADC[ 183 ]  =  PIND ; asm("nop"); 
MyBuff_ADC[ 184 ]  =  PIND ; asm("nop"); 
MyBuff_ADC[ 185 ]  =  PIND ; asm("nop"); 
MyBuff_ADC[ 186 ]  =  PIND ; asm("nop"); 
MyBuff_ADC[ 187 ]  =  PIND ; asm("nop"); 
MyBuff_ADC[ 188 ]  =  PIND ; asm("nop"); 
MyBuff_ADC[ 189 ]  =  PIND ; asm("nop"); 
MyBuff_ADC[ 190 ]  =  PIND ; asm("nop"); 
MyBuff_ADC[ 191 ]  =  PIND ; asm("nop"); 
MyBuff_ADC[ 192 ]  =  PIND ; asm("nop"); 
MyBuff_ADC[ 193 ]  =  PIND ; asm("nop"); 
MyBuff_ADC[ 194 ]  =  PIND ; asm("nop"); 
MyBuff_ADC[ 195 ]  =  PIND ; asm("nop"); 
MyBuff_ADC[ 196 ]  =  PIND ; asm("nop"); 
MyBuff_ADC[ 197 ]  =  PIND ; asm("nop"); 
MyBuff_ADC[ 198 ]  =  PIND ; asm("nop"); 
MyBuff_ADC[ 199 ]  =  PIND ; asm("nop"); 
MyBuff_ADC[ 200 ]  =  PIND ; asm("nop"); 
MyBuff_ADC[ 201 ]  =  PIND ; asm("nop"); 
MyBuff_ADC[ 202 ]  =  PIND ; asm("nop"); 
MyBuff_ADC[ 203 ]  =  PIND ; asm("nop"); 
MyBuff_ADC[ 204 ]  =  PIND ; asm("nop"); 
MyBuff_ADC[ 205 ]  =  PIND ; asm("nop"); 
MyBuff_ADC[ 206 ]  = PIND ; asm("nop");
MyBuff_ADC[ 207 ]  = PIND ; asm("nop");
MyBuff_ADC[ 208 ]  = PIND ; asm("nop");
MyBuff_ADC[ 209 ]  = PIND ; asm("nop");
MyBuff_ADC[ 210 ]  = PIND ; asm("nop");
MyBuff_ADC[ 211 ]  = PIND ; asm("nop");
MyBuff_ADC[ 212 ]  = PIND ; asm("nop");
MyBuff_ADC[ 213 ]  = PIND ; asm("nop");
MyBuff_ADC[ 214 ]  = PIND ; asm("nop");
MyBuff_ADC[ 215 ]  = PIND ; asm("nop");
MyBuff_ADC[ 216 ]  = PIND ; asm("nop");
MyBuff_ADC[ 217 ]  = PIND ; asm("nop");
MyBuff_ADC[ 218 ]  = PIND ; asm("nop");
MyBuff_ADC[ 219 ]  = PIND ; asm("nop");
MyBuff_ADC[ 220 ]  = PIND ; asm("nop");
MyBuff_ADC[ 221 ]  = PIND ; asm("nop");
MyBuff_ADC[ 222 ]  = PIND ; asm("nop");
MyBuff_ADC[ 223 ]  = PIND ; asm("nop");
MyBuff_ADC[ 224 ]  = PIND ; asm("nop");
MyBuff_ADC[ 225 ]  = PIND ; asm("nop");
MyBuff_ADC[ 226 ]  = PIND ; asm("nop");
MyBuff_ADC[ 227 ]  = PIND ; asm("nop");
MyBuff_ADC[ 228 ]  = PIND ; asm("nop");
MyBuff_ADC[ 229 ]  = PIND ; asm("nop");
MyBuff_ADC[ 230 ]  = PIND ; asm("nop");
MyBuff_ADC[ 231 ]  = PIND ; asm("nop");
MyBuff_ADC[ 232 ]  = PIND ; asm("nop");
MyBuff_ADC[ 233 ]  = PIND ; asm("nop");
MyBuff_ADC[ 234 ]  = PIND ; asm("nop");
MyBuff_ADC[ 235 ]  = PIND ; asm("nop");
MyBuff_ADC[ 236 ]  = PIND ; asm("nop");
MyBuff_ADC[ 237 ]  = PIND ; asm("nop");
MyBuff_ADC[ 238 ]  = PIND ; asm("nop");
MyBuff_ADC[ 239 ]  = PIND ; asm("nop");
MyBuff_ADC[ 240 ]  = PIND ; asm("nop");
MyBuff_ADC[ 241 ]  = PIND ; asm("nop");
MyBuff_ADC[ 242 ]  = PIND ; asm("nop");
MyBuff_ADC[ 243 ]  = PIND ; asm("nop");
MyBuff_ADC[ 244 ]  = PIND ; asm("nop");
MyBuff_ADC[ 245 ]  = PIND ; asm("nop");
MyBuff_ADC[ 246 ]  = PIND ; asm("nop");
MyBuff_ADC[ 247 ]  = PIND ; asm("nop");
MyBuff_ADC[ 248 ]  = PIND ; asm("nop");
MyBuff_ADC[ 249 ]  = PIND ; asm("nop");
MyBuff_ADC[ 250 ]  = PIND ; asm("nop");
MyBuff_ADC[ 251 ]  = PIND ; asm("nop");
MyBuff_ADC[ 252 ]  = PIND ; asm("nop");
MyBuff_ADC[ 253 ]  = PIND ; asm("nop");
MyBuff_ADC[ 254 ]  = PIND ; asm("nop");
MyBuff_ADC[ 255 ]  = PIND ; asm("nop");
 ;};


void LoadPin8()
{
while ((PINB & (0b00000010)) != 0 ){;}
MyBuff_ADC[  0 ] = PIND ;    asm("nop"); asm("nop"); asm("nop"); while ((PINB & (0b00000010)) != 0 ){;};
MyBuff_ADC[ 1 ] = PIND ;    asm("nop"); asm("nop"); asm("nop"); while ((PINB & (0b00000010)) != 0 ){;}; 
MyBuff_ADC[ 2 ] = PIND ;    asm("nop"); asm("nop"); asm("nop"); while ((PINB & (0b00000010)) != 0 ){;}; 
MyBuff_ADC[ 3 ] = PIND ;    asm("nop"); asm("nop"); asm("nop"); while ((PINB & (0b00000010)) != 0 ){;}; 
MyBuff_ADC[ 4 ] = PIND ;    asm("nop"); asm("nop"); asm("nop"); while ((PINB & (0b00000010)) != 0 ){;}; 
MyBuff_ADC[ 5 ] = PIND ;    asm("nop"); asm("nop"); asm("nop"); while ((PINB & (0b00000010)) != 0 ){;}; 
MyBuff_ADC[ 6 ] = PIND ;    asm("nop"); asm("nop"); asm("nop"); while ((PINB & (0b00000010)) != 0 ){;}; 
MyBuff_ADC[ 7 ] = PIND ;    asm("nop"); asm("nop"); asm("nop"); while ((PINB & (0b00000010)) != 0 ){;}; 
MyBuff_ADC[ 8 ] = PIND ;    asm("nop"); asm("nop"); asm("nop"); while ((PINB & (0b00000010)) != 0 ){;}; 
MyBuff_ADC[ 9 ] = PIND ;    asm("nop"); asm("nop"); asm("nop"); while ((PINB & (0b00000010)) != 0 ){;}; 
MyBuff_ADC[ 10  ] = PIND ;    asm("nop"); asm("nop"); asm("nop"); while ((PINB & (0b00000010)) != 0 ){;}; 
MyBuff_ADC[ 11  ] = PIND ;    asm("nop"); asm("nop"); asm("nop"); while ((PINB & (0b00000010)) != 0 ){;}; 
MyBuff_ADC[ 12  ] = PIND ;    asm("nop"); asm("nop"); asm("nop"); while ((PINB & (0b00000010)) != 0 ){;}; 
MyBuff_ADC[ 13  ] = PIND ;    asm("nop"); asm("nop"); asm("nop"); while ((PINB & (0b00000010)) != 0 ){;}; 
MyBuff_ADC[ 14  ] = PIND ;    asm("nop"); asm("nop"); asm("nop"); while ((PINB & (0b00000010)) != 0 ){;}; 
MyBuff_ADC[ 15  ] = PIND ;    asm("nop"); asm("nop"); asm("nop"); while ((PINB & (0b00000010)) != 0 ){;}; 
MyBuff_ADC[ 16  ] = PIND ;    asm("nop"); asm("nop"); asm("nop"); while ((PINB & (0b00000010)) != 0 ){;}; 
MyBuff_ADC[ 17  ] = PIND ;    asm("nop"); asm("nop"); asm("nop"); while ((PINB & (0b00000010)) != 0 ){;}; 
MyBuff_ADC[ 18  ] = PIND ;    asm("nop"); asm("nop"); asm("nop"); while ((PINB & (0b00000010)) != 0 ){;}; 
MyBuff_ADC[ 19  ] = PIND ;    asm("nop"); asm("nop"); asm("nop"); while ((PINB & (0b00000010)) != 0 ){;}; 
MyBuff_ADC[ 20  ] = PIND ;    asm("nop"); asm("nop"); asm("nop"); while ((PINB & (0b00000010)) != 0 ){;}; 
MyBuff_ADC[ 21  ] = PIND ;    asm("nop"); asm("nop"); asm("nop"); while ((PINB & (0b00000010)) != 0 ){;}; 
MyBuff_ADC[ 22  ] = PIND ;    asm("nop"); asm("nop"); asm("nop"); while ((PINB & (0b00000010)) != 0 ){;}; 
MyBuff_ADC[ 23  ] = PIND ;    asm("nop"); asm("nop"); asm("nop"); while ((PINB & (0b00000010)) != 0 ){;}; 
MyBuff_ADC[ 24  ] = PIND ;    asm("nop"); asm("nop"); asm("nop"); while ((PINB & (0b00000010)) != 0 ){;}; 
MyBuff_ADC[ 25  ] = PIND ;    asm("nop"); asm("nop"); asm("nop"); while ((PINB & (0b00000010)) != 0 ){;}; 
MyBuff_ADC[ 26  ] = PIND ;    asm("nop"); asm("nop"); asm("nop"); while ((PINB & (0b00000010)) != 0 ){;}; 
MyBuff_ADC[ 27  ] = PIND ;    asm("nop"); asm("nop"); asm("nop"); while ((PINB & (0b00000010)) != 0 ){;}; 
MyBuff_ADC[ 28  ] = PIND ;    asm("nop"); asm("nop"); asm("nop"); while ((PINB & (0b00000010)) != 0 ){;}; 
MyBuff_ADC[ 29  ] = PIND ;    asm("nop"); asm("nop"); asm("nop"); while ((PINB & (0b00000010)) != 0 ){;}; 
MyBuff_ADC[ 30  ] = PIND ;    asm("nop"); asm("nop"); asm("nop"); while ((PINB & (0b00000010)) != 0 ){;}; 
MyBuff_ADC[ 31  ] = PIND ;    asm("nop"); asm("nop"); asm("nop"); while ((PINB & (0b00000010)) != 0 ){;}; 
MyBuff_ADC[ 32  ] = PIND ;    asm("nop"); asm("nop"); asm("nop"); while ((PINB & (0b00000010)) != 0 ){;}; 
MyBuff_ADC[ 33  ] = PIND ;    asm("nop"); asm("nop"); asm("nop"); while ((PINB & (0b00000010)) != 0 ){;}; 
MyBuff_ADC[ 34  ] = PIND ;    asm("nop"); asm("nop"); asm("nop"); while ((PINB & (0b00000010)) != 0 ){;}; 
MyBuff_ADC[ 35  ] = PIND ;    asm("nop"); asm("nop"); asm("nop"); while ((PINB & (0b00000010)) != 0 ){;}; 
MyBuff_ADC[ 36  ] = PIND ;    asm("nop"); asm("nop"); asm("nop"); while ((PINB & (0b00000010)) != 0 ){;}; 
MyBuff_ADC[ 37  ] = PIND ;    asm("nop"); asm("nop"); asm("nop"); while ((PINB & (0b00000010)) != 0 ){;}; 
MyBuff_ADC[ 38  ] = PIND ;    asm("nop"); asm("nop"); asm("nop"); while ((PINB & (0b00000010)) != 0 ){;}; 
MyBuff_ADC[ 39  ] = PIND ;    asm("nop"); asm("nop"); asm("nop"); while ((PINB & (0b00000010)) != 0 ){;}; 
MyBuff_ADC[ 40  ] = PIND ;    asm("nop"); asm("nop"); asm("nop"); while ((PINB & (0b00000010)) != 0 ){;}; 
MyBuff_ADC[ 41  ] = PIND ;    asm("nop"); asm("nop"); asm("nop"); while ((PINB & (0b00000010)) != 0 ){;}; 
MyBuff_ADC[ 42  ] = PIND ;    asm("nop"); asm("nop"); asm("nop"); while ((PINB & (0b00000010)) != 0 ){;}; 
MyBuff_ADC[ 43  ] = PIND ;    asm("nop"); asm("nop"); asm("nop"); while ((PINB & (0b00000010)) != 0 ){;}; 
MyBuff_ADC[ 44  ] = PIND ;    asm("nop"); asm("nop"); asm("nop"); while ((PINB & (0b00000010)) != 0 ){;}; 
MyBuff_ADC[ 45  ] = PIND ;    asm("nop"); asm("nop"); asm("nop"); while ((PINB & (0b00000010)) != 0 ){;}; 
MyBuff_ADC[ 46  ] = PIND ;    asm("nop"); asm("nop"); asm("nop"); while ((PINB & (0b00000010)) != 0 ){;}; 
MyBuff_ADC[ 47  ] = PIND ;    asm("nop"); asm("nop"); asm("nop"); while ((PINB & (0b00000010)) != 0 ){;}; 
MyBuff_ADC[ 48  ] = PIND ;    asm("nop"); asm("nop"); asm("nop"); while ((PINB & (0b00000010)) != 0 ){;}; 
MyBuff_ADC[ 49  ] = PIND ;    asm("nop"); asm("nop"); asm("nop"); while ((PINB & (0b00000010)) != 0 ){;}; 
MyBuff_ADC[ 50  ] = PIND ;    asm("nop"); asm("nop"); asm("nop"); while ((PINB & (0b00000010)) != 0 ){;}; 
MyBuff_ADC[ 51  ] = PIND ;    asm("nop"); asm("nop"); asm("nop"); while ((PINB & (0b00000010)) != 0 ){;}; 
MyBuff_ADC[ 52  ] = PIND ;    asm("nop"); asm("nop"); asm("nop"); while ((PINB & (0b00000010)) != 0 ){;}; 
MyBuff_ADC[ 53  ] = PIND ;    asm("nop"); asm("nop"); asm("nop"); while ((PINB & (0b00000010)) != 0 ){;}; 
MyBuff_ADC[ 54  ] = PIND ;    asm("nop"); asm("nop"); asm("nop"); while ((PINB & (0b00000010)) != 0 ){;}; 
MyBuff_ADC[ 55  ] = PIND ;    asm("nop"); asm("nop"); asm("nop"); while ((PINB & (0b00000010)) != 0 ){;}; 
MyBuff_ADC[ 56  ] = PIND ;    asm("nop"); asm("nop"); asm("nop"); while ((PINB & (0b00000010)) != 0 ){;}; 
MyBuff_ADC[ 57  ] = PIND ;    asm("nop"); asm("nop"); asm("nop"); while ((PINB & (0b00000010)) != 0 ){;}; 
MyBuff_ADC[ 58  ] = PIND ;    asm("nop"); asm("nop"); asm("nop"); while ((PINB & (0b00000010)) != 0 ){;}; 
MyBuff_ADC[ 59  ] = PIND ;    asm("nop"); asm("nop"); asm("nop"); while ((PINB & (0b00000010)) != 0 ){;}; 
MyBuff_ADC[ 60  ] = PIND ;    asm("nop"); asm("nop"); asm("nop"); while ((PINB & (0b00000010)) != 0 ){;}; 
MyBuff_ADC[ 61  ] = PIND ;    asm("nop"); asm("nop"); asm("nop"); while ((PINB & (0b00000010)) != 0 ){;}; 
MyBuff_ADC[ 62  ] = PIND ;    asm("nop"); asm("nop"); asm("nop"); while ((PINB & (0b00000010)) != 0 ){;}; 
MyBuff_ADC[ 63  ] = PIND ;    asm("nop"); asm("nop"); asm("nop"); while ((PINB & (0b00000010)) != 0 ){;}; 
MyBuff_ADC[ 64  ] = PIND ;    asm("nop"); asm("nop"); asm("nop"); while ((PINB & (0b00000010)) != 0 ){;}; 
MyBuff_ADC[ 65  ] = PIND ;    asm("nop"); asm("nop"); asm("nop"); while ((PINB & (0b00000010)) != 0 ){;}; 
MyBuff_ADC[ 66  ] = PIND ;    asm("nop"); asm("nop"); asm("nop"); while ((PINB & (0b00000010)) != 0 ){;}; 
MyBuff_ADC[ 67  ] = PIND ;    asm("nop"); asm("nop"); asm("nop"); while ((PINB & (0b00000010)) != 0 ){;}; 
MyBuff_ADC[ 68  ] = PIND ;    asm("nop"); asm("nop"); asm("nop"); while ((PINB & (0b00000010)) != 0 ){;}; 
MyBuff_ADC[ 69  ] = PIND ;    asm("nop"); asm("nop"); asm("nop"); while ((PINB & (0b00000010)) != 0 ){;}; 
MyBuff_ADC[ 70  ] = PIND ;    asm("nop"); asm("nop"); asm("nop"); while ((PINB & (0b00000010)) != 0 ){;}; 
MyBuff_ADC[ 71  ] = PIND ;    asm("nop"); asm("nop"); asm("nop"); while ((PINB & (0b00000010)) != 0 ){;}; 
MyBuff_ADC[ 72  ] = PIND ;    asm("nop"); asm("nop"); asm("nop"); while ((PINB & (0b00000010)) != 0 ){;}; 
MyBuff_ADC[ 73  ] = PIND ;    asm("nop"); asm("nop"); asm("nop"); while ((PINB & (0b00000010)) != 0 ){;}; 
MyBuff_ADC[ 74  ] = PIND ;    asm("nop"); asm("nop"); asm("nop"); while ((PINB & (0b00000010)) != 0 ){;}; 
MyBuff_ADC[ 75  ] = PIND ;    asm("nop"); asm("nop"); asm("nop"); while ((PINB & (0b00000010)) != 0 ){;}; 
MyBuff_ADC[ 76  ] = PIND ;    asm("nop"); asm("nop"); asm("nop"); while ((PINB & (0b00000010)) != 0 ){;}; 
MyBuff_ADC[ 77  ] = PIND ;    asm("nop"); asm("nop"); asm("nop"); while ((PINB & (0b00000010)) != 0 ){;}; 
MyBuff_ADC[ 78  ] = PIND ;    asm("nop"); asm("nop"); asm("nop"); while ((PINB & (0b00000010)) != 0 ){;}; 
MyBuff_ADC[ 79  ] = PIND ;    asm("nop"); asm("nop"); asm("nop"); while ((PINB & (0b00000010)) != 0 ){;}; 
MyBuff_ADC[ 80  ] = PIND ;    asm("nop"); asm("nop"); asm("nop"); while ((PINB & (0b00000010)) != 0 ){;}; 
MyBuff_ADC[ 81  ] = PIND ;    asm("nop"); asm("nop"); asm("nop"); while ((PINB & (0b00000010)) != 0 ){;}; 
MyBuff_ADC[ 82  ] = PIND ;    asm("nop"); asm("nop"); asm("nop"); while ((PINB & (0b00000010)) != 0 ){;}; 
MyBuff_ADC[ 83  ] = PIND ;    asm("nop"); asm("nop"); asm("nop"); while ((PINB & (0b00000010)) != 0 ){;}; 
MyBuff_ADC[ 84  ] = PIND ;    asm("nop"); asm("nop"); asm("nop"); while ((PINB & (0b00000010)) != 0 ){;}; 
MyBuff_ADC[ 85  ] = PIND ;    asm("nop"); asm("nop"); asm("nop"); while ((PINB & (0b00000010)) != 0 ){;}; 
MyBuff_ADC[ 86  ] = PIND ;    asm("nop"); asm("nop"); asm("nop"); while ((PINB & (0b00000010)) != 0 ){;}; 
MyBuff_ADC[ 87  ] = PIND ;    asm("nop"); asm("nop"); asm("nop"); while ((PINB & (0b00000010)) != 0 ){;}; 
MyBuff_ADC[ 88  ] = PIND ;    asm("nop"); asm("nop"); asm("nop"); while ((PINB & (0b00000010)) != 0 ){;}; 
MyBuff_ADC[ 89  ] = PIND ;    asm("nop"); asm("nop"); asm("nop"); while ((PINB & (0b00000010)) != 0 ){;}; 
MyBuff_ADC[ 90  ] = PIND ;    asm("nop"); asm("nop"); asm("nop"); while ((PINB & (0b00000010)) != 0 ){;}; 
MyBuff_ADC[ 91  ] = PIND ;    asm("nop"); asm("nop"); asm("nop"); while ((PINB & (0b00000010)) != 0 ){;}; 
MyBuff_ADC[ 92  ] = PIND ;    asm("nop"); asm("nop"); asm("nop"); while ((PINB & (0b00000010)) != 0 ){;}; 
MyBuff_ADC[ 93  ] = PIND ;    asm("nop"); asm("nop"); asm("nop"); while ((PINB & (0b00000010)) != 0 ){;}; 
MyBuff_ADC[ 94  ] = PIND ;    asm("nop"); asm("nop"); asm("nop"); while ((PINB & (0b00000010)) != 0 ){;}; 
MyBuff_ADC[ 95  ] = PIND ;    asm("nop"); asm("nop"); asm("nop"); while ((PINB & (0b00000010)) != 0 ){;}; 
MyBuff_ADC[ 96  ] = PIND ;    asm("nop"); asm("nop"); asm("nop"); while ((PINB & (0b00000010)) != 0 ){;}; 
MyBuff_ADC[ 97  ] = PIND ;    asm("nop"); asm("nop"); asm("nop"); while ((PINB & (0b00000010)) != 0 ){;}; 
MyBuff_ADC[ 98  ] = PIND ;    asm("nop"); asm("nop"); asm("nop"); while ((PINB & (0b00000010)) != 0 ){;}; 
MyBuff_ADC[ 99  ] = PIND ;    asm("nop"); asm("nop"); asm("nop"); while ((PINB & (0b00000010)) != 0 ){;}; 
MyBuff_ADC[ 100 ] = PIND ;    asm("nop"); asm("nop"); asm("nop"); while ((PINB & (0b00000010)) != 0 ){;}; 
MyBuff_ADC[ 101 ] = PIND ;    asm("nop"); asm("nop"); asm("nop"); while ((PINB & (0b00000010)) != 0 ){;}; 
MyBuff_ADC[ 102 ] = PIND ;    asm("nop"); asm("nop"); asm("nop"); while ((PINB & (0b00000010)) != 0 ){;}; 
MyBuff_ADC[ 103 ] = PIND ;    asm("nop"); asm("nop"); asm("nop"); while ((PINB & (0b00000010)) != 0 ){;}; 
MyBuff_ADC[ 104 ] = PIND ;    asm("nop"); asm("nop"); asm("nop"); while ((PINB & (0b00000010)) != 0 ){;}; 
MyBuff_ADC[ 105 ] = PIND ;    asm("nop"); asm("nop"); asm("nop"); while ((PINB & (0b00000010)) != 0 ){;}; 
MyBuff_ADC[ 106 ] = PIND ;    asm("nop"); asm("nop"); asm("nop"); while ((PINB & (0b00000010)) != 0 ){;}; 
MyBuff_ADC[ 107 ] = PIND ;    asm("nop"); asm("nop"); asm("nop"); while ((PINB & (0b00000010)) != 0 ){;}; 
MyBuff_ADC[ 108 ] = PIND ;    asm("nop"); asm("nop"); asm("nop"); while ((PINB & (0b00000010)) != 0 ){;}; 
MyBuff_ADC[ 109 ] = PIND ;    asm("nop"); asm("nop"); asm("nop"); while ((PINB & (0b00000010)) != 0 ){;}; 
MyBuff_ADC[ 110 ] = PIND ;    asm("nop"); asm("nop"); asm("nop"); while ((PINB & (0b00000010)) != 0 ){;}; 
MyBuff_ADC[ 111 ] = PIND ;    asm("nop"); asm("nop"); asm("nop"); while ((PINB & (0b00000010)) != 0 ){;}; 
MyBuff_ADC[ 112 ] = PIND ;    asm("nop"); asm("nop"); asm("nop"); while ((PINB & (0b00000010)) != 0 ){;}; 
MyBuff_ADC[ 113 ] = PIND ;    asm("nop"); asm("nop"); asm("nop"); while ((PINB & (0b00000010)) != 0 ){;}; 
MyBuff_ADC[ 114 ] = PIND ;    asm("nop"); asm("nop"); asm("nop"); while ((PINB & (0b00000010)) != 0 ){;}; 
MyBuff_ADC[ 115 ] = PIND ;    asm("nop"); asm("nop"); asm("nop"); while ((PINB & (0b00000010)) != 0 ){;}; 
MyBuff_ADC[ 116 ] = PIND ;    asm("nop"); asm("nop"); asm("nop"); while ((PINB & (0b00000010)) != 0 ){;}; 
MyBuff_ADC[ 117 ] = PIND ;    asm("nop"); asm("nop"); asm("nop"); while ((PINB & (0b00000010)) != 0 ){;}; 
MyBuff_ADC[ 118 ] = PIND ;    asm("nop"); asm("nop"); asm("nop"); while ((PINB & (0b00000010)) != 0 ){;}; 
MyBuff_ADC[ 119 ] = PIND ;    asm("nop"); asm("nop"); asm("nop"); while ((PINB & (0b00000010)) != 0 ){;}; 
MyBuff_ADC[ 120 ] = PIND ;    asm("nop"); asm("nop"); asm("nop"); while ((PINB & (0b00000010)) != 0 ){;}; 
MyBuff_ADC[ 121 ] = PIND ;    asm("nop"); asm("nop"); asm("nop"); while ((PINB & (0b00000010)) != 0 ){;}; 
MyBuff_ADC[ 122 ] = PIND ;    asm("nop"); asm("nop"); asm("nop"); while ((PINB & (0b00000010)) != 0 ){;}; 
MyBuff_ADC[ 123 ] = PIND ;    asm("nop"); asm("nop"); asm("nop"); while ((PINB & (0b00000010)) != 0 ){;}; 
MyBuff_ADC[ 124 ] = PIND ;    asm("nop"); asm("nop"); asm("nop"); while ((PINB & (0b00000010)) != 0 ){;}; 
MyBuff_ADC[ 125 ] = PIND ;    asm("nop"); asm("nop"); asm("nop"); while ((PINB & (0b00000010)) != 0 ){;}; 
MyBuff_ADC[ 126 ] = PIND ;    asm("nop"); asm("nop"); asm("nop"); while ((PINB & (0b00000010)) != 0 ){;}; 
MyBuff_ADC[ 127 ] = PIND ;    asm("nop"); asm("nop"); asm("nop"); while ((PINB & (0b00000010)) != 0 ){;}; 
MyBuff_ADC[ 128 ] = PIND ;    asm("nop"); asm("nop"); asm("nop"); while ((PINB & (0b00000010)) != 0 ){;}; 
MyBuff_ADC[ 129 ] = PIND ;    asm("nop"); asm("nop"); asm("nop"); while ((PINB & (0b00000010)) != 0 ){;}; 
MyBuff_ADC[ 130 ] = PIND ;    asm("nop"); asm("nop"); asm("nop"); while ((PINB & (0b00000010)) != 0 ){;}; 
MyBuff_ADC[ 131 ] = PIND ;    asm("nop"); asm("nop"); asm("nop"); while ((PINB & (0b00000010)) != 0 ){;}; 
MyBuff_ADC[ 132 ] = PIND ;    asm("nop"); asm("nop"); asm("nop"); while ((PINB & (0b00000010)) != 0 ){;}; 
MyBuff_ADC[ 133 ] = PIND ;    asm("nop"); asm("nop"); asm("nop"); while ((PINB & (0b00000010)) != 0 ){;}; 
MyBuff_ADC[ 134 ] = PIND ;    asm("nop"); asm("nop"); asm("nop"); while ((PINB & (0b00000010)) != 0 ){;}; 
MyBuff_ADC[ 135 ] = PIND ;    asm("nop"); asm("nop"); asm("nop"); while ((PINB & (0b00000010)) != 0 ){;}; 
MyBuff_ADC[ 136 ] = PIND ;    asm("nop"); asm("nop"); asm("nop"); while ((PINB & (0b00000010)) != 0 ){;}; 
MyBuff_ADC[ 137 ] = PIND ;    asm("nop"); asm("nop"); asm("nop"); while ((PINB & (0b00000010)) != 0 ){;}; 
MyBuff_ADC[ 138 ] = PIND ;    asm("nop"); asm("nop"); asm("nop"); while ((PINB & (0b00000010)) != 0 ){;}; 
MyBuff_ADC[ 139 ] = PIND ;    asm("nop"); asm("nop"); asm("nop"); while ((PINB & (0b00000010)) != 0 ){;}; 
MyBuff_ADC[ 140 ] = PIND ;    asm("nop"); asm("nop"); asm("nop"); while ((PINB & (0b00000010)) != 0 ){;}; 
MyBuff_ADC[ 141 ] = PIND ;    asm("nop"); asm("nop"); asm("nop"); while ((PINB & (0b00000010)) != 0 ){;}; 
MyBuff_ADC[ 142 ] = PIND ;    asm("nop"); asm("nop"); asm("nop"); while ((PINB & (0b00000010)) != 0 ){;}; 
MyBuff_ADC[ 143 ] = PIND ;    asm("nop"); asm("nop"); asm("nop"); while ((PINB & (0b00000010)) != 0 ){;}; 
MyBuff_ADC[ 144 ] = PIND ;    asm("nop"); asm("nop"); asm("nop"); while ((PINB & (0b00000010)) != 0 ){;}; 
MyBuff_ADC[ 145 ] = PIND ;    asm("nop"); asm("nop"); asm("nop"); while ((PINB & (0b00000010)) != 0 ){;}; 
MyBuff_ADC[ 146 ] = PIND ;    asm("nop"); asm("nop"); asm("nop"); while ((PINB & (0b00000010)) != 0 ){;}; 
MyBuff_ADC[ 147 ] = PIND ;    asm("nop"); asm("nop"); asm("nop"); while ((PINB & (0b00000010)) != 0 ){;}; 
MyBuff_ADC[ 148 ] = PIND ;    asm("nop"); asm("nop"); asm("nop"); while ((PINB & (0b00000010)) != 0 ){;}; 
MyBuff_ADC[ 149 ] = PIND ;    asm("nop"); asm("nop"); asm("nop"); while ((PINB & (0b00000010)) != 0 ){;}; 
MyBuff_ADC[ 150 ] = PIND ;    asm("nop"); asm("nop"); asm("nop"); while ((PINB & (0b00000010)) != 0 ){;}; 
MyBuff_ADC[ 151 ] = PIND ;    asm("nop"); asm("nop"); asm("nop"); while ((PINB & (0b00000010)) != 0 ){;}; 
MyBuff_ADC[ 152 ] = PIND ;    asm("nop"); asm("nop"); asm("nop"); while ((PINB & (0b00000010)) != 0 ){;}; 
MyBuff_ADC[ 153 ] = PIND ;    asm("nop"); asm("nop"); asm("nop"); while ((PINB & (0b00000010)) != 0 ){;}; 
MyBuff_ADC[ 154 ] = PIND ;    asm("nop"); asm("nop"); asm("nop"); while ((PINB & (0b00000010)) != 0 ){;}; 
MyBuff_ADC[ 155 ] = PIND ;    asm("nop"); asm("nop"); asm("nop"); while ((PINB & (0b00000010)) != 0 ){;}; 
MyBuff_ADC[ 156 ] = PIND ;    asm("nop"); asm("nop"); asm("nop"); while ((PINB & (0b00000010)) != 0 ){;}; 
MyBuff_ADC[ 157 ] = PIND ;    asm("nop"); asm("nop"); asm("nop"); while ((PINB & (0b00000010)) != 0 ){;}; 
MyBuff_ADC[ 158 ] = PIND ;    asm("nop"); asm("nop"); asm("nop"); while ((PINB & (0b00000010)) != 0 ){;}; 
MyBuff_ADC[ 159 ] = PIND ;    asm("nop"); asm("nop"); asm("nop"); while ((PINB & (0b00000010)) != 0 ){;}; 
MyBuff_ADC[ 160 ] = PIND ;    asm("nop"); asm("nop"); asm("nop"); while ((PINB & (0b00000010)) != 0 ){;}; 
MyBuff_ADC[ 161 ] = PIND ;    asm("nop"); asm("nop"); asm("nop"); while ((PINB & (0b00000010)) != 0 ){;}; 
MyBuff_ADC[ 162 ] = PIND ;    asm("nop"); asm("nop"); asm("nop"); while ((PINB & (0b00000010)) != 0 ){;}; 
MyBuff_ADC[ 163 ] = PIND ;    asm("nop"); asm("nop"); asm("nop"); while ((PINB & (0b00000010)) != 0 ){;}; 
MyBuff_ADC[ 164 ] = PIND ;    asm("nop"); asm("nop"); asm("nop"); while ((PINB & (0b00000010)) != 0 ){;}; 
MyBuff_ADC[ 165 ] = PIND ;    asm("nop"); asm("nop"); asm("nop"); while ((PINB & (0b00000010)) != 0 ){;}; 
MyBuff_ADC[ 166 ] = PIND ;    asm("nop"); asm("nop"); asm("nop"); while ((PINB & (0b00000010)) != 0 ){;}; 
MyBuff_ADC[ 167 ] = PIND ;    asm("nop"); asm("nop"); asm("nop"); while ((PINB & (0b00000010)) != 0 ){;}; 
MyBuff_ADC[ 168 ] = PIND ;    asm("nop"); asm("nop"); asm("nop"); while ((PINB & (0b00000010)) != 0 ){;}; 
MyBuff_ADC[ 169 ] = PIND ;    asm("nop"); asm("nop"); asm("nop"); while ((PINB & (0b00000010)) != 0 ){;}; 
MyBuff_ADC[ 170 ] = PIND ;    asm("nop"); asm("nop"); asm("nop"); while ((PINB & (0b00000010)) != 0 ){;}; 
MyBuff_ADC[ 171 ] = PIND ;    asm("nop"); asm("nop"); asm("nop"); while ((PINB & (0b00000010)) != 0 ){;}; 
MyBuff_ADC[ 172 ] = PIND ;    asm("nop"); asm("nop"); asm("nop"); while ((PINB & (0b00000010)) != 0 ){;}; 
MyBuff_ADC[ 173 ] = PIND ;    asm("nop"); asm("nop"); asm("nop"); while ((PINB & (0b00000010)) != 0 ){;}; 
MyBuff_ADC[ 174 ] = PIND ;    asm("nop"); asm("nop"); asm("nop"); while ((PINB & (0b00000010)) != 0 ){;}; 
MyBuff_ADC[ 175 ] = PIND ;    asm("nop"); asm("nop"); asm("nop"); while ((PINB & (0b00000010)) != 0 ){;}; 
MyBuff_ADC[ 176 ] = PIND ;    asm("nop"); asm("nop"); asm("nop"); while ((PINB & (0b00000010)) != 0 ){;}; 
MyBuff_ADC[ 177 ] = PIND ;    asm("nop"); asm("nop"); asm("nop"); while ((PINB & (0b00000010)) != 0 ){;}; 
MyBuff_ADC[ 178 ] = PIND ;    asm("nop"); asm("nop"); asm("nop"); while ((PINB & (0b00000010)) != 0 ){;}; 
MyBuff_ADC[ 179 ] = PIND ;    asm("nop"); asm("nop"); asm("nop"); while ((PINB & (0b00000010)) != 0 ){;}; 
MyBuff_ADC[ 180 ] = PIND ;    asm("nop"); asm("nop"); asm("nop"); while ((PINB & (0b00000010)) != 0 ){;}; 
MyBuff_ADC[ 181 ] = PIND ;    asm("nop"); asm("nop"); asm("nop"); while ((PINB & (0b00000010)) != 0 ){;}; 
MyBuff_ADC[ 182 ] = PIND ;    asm("nop"); asm("nop"); asm("nop"); while ((PINB & (0b00000010)) != 0 ){;}; 
MyBuff_ADC[ 183 ] = PIND ;    asm("nop"); asm("nop"); asm("nop"); while ((PINB & (0b00000010)) != 0 ){;}; 
MyBuff_ADC[ 184 ] = PIND ;    asm("nop"); asm("nop"); asm("nop"); while ((PINB & (0b00000010)) != 0 ){;}; 
MyBuff_ADC[ 185 ] = PIND ;    asm("nop"); asm("nop"); asm("nop"); while ((PINB & (0b00000010)) != 0 ){;}; 
MyBuff_ADC[ 186 ] = PIND ;    asm("nop"); asm("nop"); asm("nop"); while ((PINB & (0b00000010)) != 0 ){;}; 
MyBuff_ADC[ 187 ] = PIND ;    asm("nop"); asm("nop"); asm("nop"); while ((PINB & (0b00000010)) != 0 ){;}; 
MyBuff_ADC[ 188 ] = PIND ;    asm("nop"); asm("nop"); asm("nop"); while ((PINB & (0b00000010)) != 0 ){;}; 
MyBuff_ADC[ 189 ] = PIND ;    asm("nop"); asm("nop"); asm("nop"); while ((PINB & (0b00000010)) != 0 ){;}; 
MyBuff_ADC[ 190 ] = PIND ;    asm("nop"); asm("nop"); asm("nop"); while ((PINB & (0b00000010)) != 0 ){;}; 
MyBuff_ADC[ 191 ] = PIND ;    asm("nop"); asm("nop"); asm("nop"); while ((PINB & (0b00000010)) != 0 ){;}; 
MyBuff_ADC[ 192 ] = PIND ;    asm("nop"); asm("nop"); asm("nop"); while ((PINB & (0b00000010)) != 0 ){;}; 
MyBuff_ADC[ 193 ] = PIND ;    asm("nop"); asm("nop"); asm("nop"); while ((PINB & (0b00000010)) != 0 ){;}; 
MyBuff_ADC[ 194 ] = PIND ;    asm("nop"); asm("nop"); asm("nop"); while ((PINB & (0b00000010)) != 0 ){;}; 
MyBuff_ADC[ 195 ] = PIND ;    asm("nop"); asm("nop"); asm("nop"); while ((PINB & (0b00000010)) != 0 ){;}; 
MyBuff_ADC[ 196 ] = PIND ;    asm("nop"); asm("nop"); asm("nop"); while ((PINB & (0b00000010)) != 0 ){;}; 
MyBuff_ADC[ 197 ] = PIND ;    asm("nop"); asm("nop"); asm("nop"); while ((PINB & (0b00000010)) != 0 ){;}; 
MyBuff_ADC[ 198 ] = PIND ;    asm("nop"); asm("nop"); asm("nop"); while ((PINB & (0b00000010)) != 0 ){;}; 
MyBuff_ADC[ 199 ] = PIND ;    asm("nop"); asm("nop"); asm("nop"); while ((PINB & (0b00000010)) != 0 ){;}; 
MyBuff_ADC[ 200 ] = PIND ;    asm("nop"); asm("nop"); asm("nop"); while ((PINB & (0b00000010)) != 0 ){;}; 
MyBuff_ADC[ 201 ] = PIND ;    asm("nop"); asm("nop"); asm("nop"); while ((PINB & (0b00000010)) != 0 ){;}; 
MyBuff_ADC[ 202 ] = PIND ;    asm("nop"); asm("nop"); asm("nop"); while ((PINB & (0b00000010)) != 0 ){;}; 
MyBuff_ADC[ 203 ] = PIND ;    asm("nop"); asm("nop"); asm("nop"); while ((PINB & (0b00000010)) != 0 ){;}; 
MyBuff_ADC[ 204 ] = PIND ;    asm("nop"); asm("nop"); asm("nop"); while ((PINB & (0b00000010)) != 0 ){;}; 
MyBuff_ADC[ 205 ] = PIND ;    asm("nop"); asm("nop"); asm("nop"); while ((PINB & (0b00000010)) != 0 ){;}; 
MyBuff_ADC[ 206 ] = PIND ;    asm("nop"); asm("nop"); asm("nop"); while ((PINB & (0b00000010)) != 0 ){;}; 
MyBuff_ADC[ 207 ] = PIND ;    asm("nop"); asm("nop"); asm("nop"); while ((PINB & (0b00000010)) != 0 ){;}; 
MyBuff_ADC[ 208 ] = PIND ;    asm("nop"); asm("nop"); asm("nop"); while ((PINB & (0b00000010)) != 0 ){;}; 
MyBuff_ADC[ 209 ] = PIND ;    asm("nop"); asm("nop"); asm("nop"); while ((PINB & (0b00000010)) != 0 ){;}; 
MyBuff_ADC[ 210 ] = PIND ;    asm("nop"); asm("nop"); asm("nop"); while ((PINB & (0b00000010)) != 0 ){;}; 
MyBuff_ADC[ 211 ] = PIND ;    asm("nop"); asm("nop"); asm("nop"); while ((PINB & (0b00000010)) != 0 ){;}; 
MyBuff_ADC[ 212 ] = PIND ;    asm("nop"); asm("nop"); asm("nop"); while ((PINB & (0b00000010)) != 0 ){;}; 
MyBuff_ADC[ 213 ] = PIND ;    asm("nop"); asm("nop"); asm("nop"); while ((PINB & (0b00000010)) != 0 ){;}; 
MyBuff_ADC[ 214 ] = PIND ;    asm("nop"); asm("nop"); asm("nop"); while ((PINB & (0b00000010)) != 0 ){;}; 
MyBuff_ADC[ 215 ] = PIND ;    asm("nop"); asm("nop"); asm("nop"); while ((PINB & (0b00000010)) != 0 ){;}; 
MyBuff_ADC[ 216 ] = PIND ;    asm("nop"); asm("nop"); asm("nop"); while ((PINB & (0b00000010)) != 0 ){;}; 
MyBuff_ADC[ 217 ] = PIND ;    asm("nop"); asm("nop"); asm("nop"); while ((PINB & (0b00000010)) != 0 ){;}; 
MyBuff_ADC[ 218 ] = PIND ;    asm("nop"); asm("nop"); asm("nop"); while ((PINB & (0b00000010)) != 0 ){;}; 
MyBuff_ADC[ 219 ] = PIND ;    asm("nop"); asm("nop"); asm("nop"); while ((PINB & (0b00000010)) != 0 ){;}; 
MyBuff_ADC[ 220 ] = PIND ;    asm("nop"); asm("nop"); asm("nop"); while ((PINB & (0b00000010)) != 0 ){;}; 
MyBuff_ADC[ 221 ] = PIND ;    asm("nop"); asm("nop"); asm("nop"); while ((PINB & (0b00000010)) != 0 ){;}; 
MyBuff_ADC[ 222 ] = PIND ;    asm("nop"); asm("nop"); asm("nop"); while ((PINB & (0b00000010)) != 0 ){;}; 
MyBuff_ADC[ 223 ] = PIND ;    asm("nop"); asm("nop"); asm("nop"); while ((PINB & (0b00000010)) != 0 ){;}; 
MyBuff_ADC[ 224 ] = PIND ;    asm("nop"); asm("nop"); asm("nop"); while ((PINB & (0b00000010)) != 0 ){;}; 
MyBuff_ADC[ 225 ] = PIND ;    asm("nop"); asm("nop"); asm("nop"); while ((PINB & (0b00000010)) != 0 ){;}; 
MyBuff_ADC[ 226 ] = PIND ;    asm("nop"); asm("nop"); asm("nop"); while ((PINB & (0b00000010)) != 0 ){;}; 
MyBuff_ADC[ 227 ] = PIND ;    asm("nop"); asm("nop"); asm("nop"); while ((PINB & (0b00000010)) != 0 ){;}; 
MyBuff_ADC[ 228 ] = PIND ;    asm("nop"); asm("nop"); asm("nop"); while ((PINB & (0b00000010)) != 0 ){;}; 
MyBuff_ADC[ 229 ] = PIND ;    asm("nop"); asm("nop"); asm("nop"); while ((PINB & (0b00000010)) != 0 ){;}; 
MyBuff_ADC[ 230 ] = PIND ;    asm("nop"); asm("nop"); asm("nop"); while ((PINB & (0b00000010)) != 0 ){;}; 
MyBuff_ADC[ 231 ] = PIND ;    asm("nop"); asm("nop"); asm("nop"); while ((PINB & (0b00000010)) != 0 ){;}; 
MyBuff_ADC[ 232 ] = PIND ;    asm("nop"); asm("nop"); asm("nop"); while ((PINB & (0b00000010)) != 0 ){;}; 
MyBuff_ADC[ 233 ] = PIND ;    asm("nop"); asm("nop"); asm("nop"); while ((PINB & (0b00000010)) != 0 ){;}; 
MyBuff_ADC[ 234 ] = PIND ;    asm("nop"); asm("nop"); asm("nop"); while ((PINB & (0b00000010)) != 0 ){;}; 
MyBuff_ADC[ 235 ] = PIND ;    asm("nop"); asm("nop"); asm("nop"); while ((PINB & (0b00000010)) != 0 ){;}; 
MyBuff_ADC[ 236 ] = PIND ;    asm("nop"); asm("nop"); asm("nop"); while ((PINB & (0b00000010)) != 0 ){;}; 
MyBuff_ADC[ 237 ] = PIND ;    asm("nop"); asm("nop"); asm("nop"); while ((PINB & (0b00000010)) != 0 ){;}; 
MyBuff_ADC[ 238 ] = PIND ;    asm("nop"); asm("nop"); asm("nop"); while ((PINB & (0b00000010)) != 0 ){;}; 
MyBuff_ADC[ 239 ] = PIND ;    asm("nop"); asm("nop"); asm("nop"); while ((PINB & (0b00000010)) != 0 ){;}; 
MyBuff_ADC[ 240 ] = PIND ;    asm("nop"); asm("nop"); asm("nop"); while ((PINB & (0b00000010)) != 0 ){;}; 
MyBuff_ADC[ 241 ] = PIND ;    asm("nop"); asm("nop"); asm("nop"); while ((PINB & (0b00000010)) != 0 ){;}; 
MyBuff_ADC[ 242 ] = PIND ;    asm("nop"); asm("nop"); asm("nop"); while ((PINB & (0b00000010)) != 0 ){;}; 
MyBuff_ADC[ 243 ] = PIND ;    asm("nop"); asm("nop"); asm("nop"); while ((PINB & (0b00000010)) != 0 ){;}; 
MyBuff_ADC[ 244 ] = PIND ;    asm("nop"); asm("nop"); asm("nop"); while ((PINB & (0b00000010)) != 0 ){;}; 
MyBuff_ADC[ 245 ] = PIND ;    asm("nop"); asm("nop"); asm("nop"); while ((PINB & (0b00000010)) != 0 ){;}; 
MyBuff_ADC[ 246 ] = PIND ;    asm("nop"); asm("nop"); asm("nop"); while ((PINB & (0b00000010)) != 0 ){;}; 
MyBuff_ADC[ 247 ] = PIND ;    asm("nop"); asm("nop"); asm("nop"); while ((PINB & (0b00000010)) != 0 ){;}; 
MyBuff_ADC[ 248 ] = PIND ;    asm("nop"); asm("nop"); asm("nop"); while ((PINB & (0b00000010)) != 0 ){;}; 
MyBuff_ADC[ 249 ] = PIND ;    asm("nop"); asm("nop"); asm("nop"); while ((PINB & (0b00000010)) != 0 ){;}; 
MyBuff_ADC[ 250 ] = PIND ;    asm("nop"); asm("nop"); asm("nop"); while ((PINB & (0b00000010)) != 0 ){;}; 
MyBuff_ADC[ 251 ] = PIND ;    asm("nop"); asm("nop"); asm("nop"); while ((PINB & (0b00000010)) != 0 ){;}; 
MyBuff_ADC[ 252 ] = PIND ;    asm("nop"); asm("nop"); asm("nop"); while ((PINB & (0b00000010)) != 0 ){;}; 
MyBuff_ADC[ 253 ] = PIND ;    asm("nop"); asm("nop"); asm("nop"); while ((PINB & (0b00000010)) != 0 ){;}; 
MyBuff_ADC[ 254 ] = PIND ;    asm("nop"); asm("nop"); asm("nop"); while ((PINB & (0b00000010)) != 0 ){;}; 
MyBuff_ADC[ 255 ] = PIND ;    asm("nop"); asm("nop"); asm("nop"); while ((PINB & (0b00000010)) != 0 ){;};
  
}


void LoadPin16()
{
while ((PINB & (0b00000010)) != 0 ){;}
MyBuff_ADC[  0 ] = PIND ;    delay16 ();
MyBuff_ADC[ 1 ] = PIND ;    delay16 (); 
MyBuff_ADC[ 2 ] = PIND ;    delay16 (); 
MyBuff_ADC[ 3 ] = PIND ;    delay16 (); 
MyBuff_ADC[ 4 ] = PIND ;    delay16 (); 
MyBuff_ADC[ 5 ] = PIND ;    delay16 (); 
MyBuff_ADC[ 6 ] = PIND ;    delay16 (); 
MyBuff_ADC[ 7 ] = PIND ;    delay16 (); 
MyBuff_ADC[ 8 ] = PIND ;    delay16 (); 
MyBuff_ADC[ 9 ] = PIND ;    delay16 (); 
MyBuff_ADC[ 10  ] = PIND ;    delay16 (); 
MyBuff_ADC[ 11  ] = PIND ;    delay16 (); 
MyBuff_ADC[ 12  ] = PIND ;    delay16 (); 
MyBuff_ADC[ 13  ] = PIND ;    delay16 (); 
MyBuff_ADC[ 14  ] = PIND ;    delay16 (); 
MyBuff_ADC[ 15  ] = PIND ;    delay16 (); 
MyBuff_ADC[ 16  ] = PIND ;    delay16 (); 
MyBuff_ADC[ 17  ] = PIND ;    delay16 (); 
MyBuff_ADC[ 18  ] = PIND ;    delay16 (); 
MyBuff_ADC[ 19  ] = PIND ;    delay16 (); 
MyBuff_ADC[ 20  ] = PIND ;    delay16 (); 
MyBuff_ADC[ 21  ] = PIND ;    delay16 (); 
MyBuff_ADC[ 22  ] = PIND ;    delay16 (); 
MyBuff_ADC[ 23  ] = PIND ;    delay16 (); 
MyBuff_ADC[ 24  ] = PIND ;    delay16 (); 
MyBuff_ADC[ 25  ] = PIND ;    delay16 (); 
MyBuff_ADC[ 26  ] = PIND ;    delay16 (); 
MyBuff_ADC[ 27  ] = PIND ;    delay16 (); 
MyBuff_ADC[ 28  ] = PIND ;    delay16 (); 
MyBuff_ADC[ 29  ] = PIND ;    delay16 (); 
MyBuff_ADC[ 30  ] = PIND ;    delay16 (); 
MyBuff_ADC[ 31  ] = PIND ;    delay16 (); 
MyBuff_ADC[ 32  ] = PIND ;    delay16 (); 
MyBuff_ADC[ 33  ] = PIND ;    delay16 (); 
MyBuff_ADC[ 34  ] = PIND ;    delay16 (); 
MyBuff_ADC[ 35  ] = PIND ;    delay16 (); 
MyBuff_ADC[ 36  ] = PIND ;    delay16 (); 
MyBuff_ADC[ 37  ] = PIND ;    delay16 (); 
MyBuff_ADC[ 38  ] = PIND ;    delay16 (); 
MyBuff_ADC[ 39  ] = PIND ;    delay16 (); 
MyBuff_ADC[ 40  ] = PIND ;    delay16 (); 
MyBuff_ADC[ 41  ] = PIND ;    delay16 (); 
MyBuff_ADC[ 42  ] = PIND ;    delay16 (); 
MyBuff_ADC[ 43  ] = PIND ;    delay16 (); 
MyBuff_ADC[ 44  ] = PIND ;    delay16 (); 
MyBuff_ADC[ 45  ] = PIND ;    delay16 (); 
MyBuff_ADC[ 46  ] = PIND ;    delay16 (); 
MyBuff_ADC[ 47  ] = PIND ;    delay16 (); 
MyBuff_ADC[ 48  ] = PIND ;    delay16 (); 
MyBuff_ADC[ 49  ] = PIND ;    delay16 (); 
MyBuff_ADC[ 50  ] = PIND ;    delay16 (); 
MyBuff_ADC[ 51  ] = PIND ;    delay16 (); 
MyBuff_ADC[ 52  ] = PIND ;    delay16 (); 
MyBuff_ADC[ 53  ] = PIND ;    delay16 (); 
MyBuff_ADC[ 54  ] = PIND ;    delay16 (); 
MyBuff_ADC[ 55  ] = PIND ;    delay16 (); 
MyBuff_ADC[ 56  ] = PIND ;    delay16 (); 
MyBuff_ADC[ 57  ] = PIND ;    delay16 (); 
MyBuff_ADC[ 58  ] = PIND ;    delay16 (); 
MyBuff_ADC[ 59  ] = PIND ;    delay16 (); 
MyBuff_ADC[ 60  ] = PIND ;    delay16 (); 
MyBuff_ADC[ 61  ] = PIND ;    delay16 (); 
MyBuff_ADC[ 62  ] = PIND ;    delay16 (); 
MyBuff_ADC[ 63  ] = PIND ;    delay16 (); 
MyBuff_ADC[ 64  ] = PIND ;    delay16 (); 
MyBuff_ADC[ 65  ] = PIND ;    delay16 (); 
MyBuff_ADC[ 66  ] = PIND ;    delay16 (); 
MyBuff_ADC[ 67  ] = PIND ;    delay16 (); 
MyBuff_ADC[ 68  ] = PIND ;    delay16 (); 
MyBuff_ADC[ 69  ] = PIND ;    delay16 (); 
MyBuff_ADC[ 70  ] = PIND ;    delay16 (); 
MyBuff_ADC[ 71  ] = PIND ;    delay16 (); 
MyBuff_ADC[ 72  ] = PIND ;    delay16 (); 
MyBuff_ADC[ 73  ] = PIND ;    delay16 (); 
MyBuff_ADC[ 74  ] = PIND ;    delay16 (); 
MyBuff_ADC[ 75  ] = PIND ;    delay16 (); 
MyBuff_ADC[ 76  ] = PIND ;    delay16 (); 
MyBuff_ADC[ 77  ] = PIND ;    delay16 (); 
MyBuff_ADC[ 78  ] = PIND ;    delay16 (); 
MyBuff_ADC[ 79  ] = PIND ;    delay16 (); 
MyBuff_ADC[ 80  ] = PIND ;    delay16 (); 
MyBuff_ADC[ 81  ] = PIND ;    delay16 (); 
MyBuff_ADC[ 82  ] = PIND ;    delay16 (); 
MyBuff_ADC[ 83  ] = PIND ;    delay16 (); 
MyBuff_ADC[ 84  ] = PIND ;    delay16 (); 
MyBuff_ADC[ 85  ] = PIND ;    delay16 (); 
MyBuff_ADC[ 86  ] = PIND ;    delay16 (); 
MyBuff_ADC[ 87  ] = PIND ;    delay16 (); 
MyBuff_ADC[ 88  ] = PIND ;    delay16 (); 
MyBuff_ADC[ 89  ] = PIND ;    delay16 (); 
MyBuff_ADC[ 90  ] = PIND ;    delay16 (); 
MyBuff_ADC[ 91  ] = PIND ;    delay16 (); 
MyBuff_ADC[ 92  ] = PIND ;    delay16 (); 
MyBuff_ADC[ 93  ] = PIND ;    delay16 (); 
MyBuff_ADC[ 94  ] = PIND ;    delay16 (); 
MyBuff_ADC[ 95  ] = PIND ;    delay16 (); 
MyBuff_ADC[ 96  ] = PIND ;    delay16 (); 
MyBuff_ADC[ 97  ] = PIND ;    delay16 (); 
MyBuff_ADC[ 98  ] = PIND ;    delay16 (); 
MyBuff_ADC[ 99  ] = PIND ;    delay16 (); 
MyBuff_ADC[ 100 ] = PIND ;    delay16 (); 
MyBuff_ADC[ 101 ] = PIND ;    delay16 (); 
MyBuff_ADC[ 102 ] = PIND ;    delay16 (); 
MyBuff_ADC[ 103 ] = PIND ;    delay16 (); 
MyBuff_ADC[ 104 ] = PIND ;    delay16 (); 
MyBuff_ADC[ 105 ] = PIND ;    delay16 (); 
MyBuff_ADC[ 106 ] = PIND ;    delay16 (); 
MyBuff_ADC[ 107 ] = PIND ;    delay16 (); 
MyBuff_ADC[ 108 ] = PIND ;    delay16 (); 
MyBuff_ADC[ 109 ] = PIND ;    delay16 (); 
MyBuff_ADC[ 110 ] = PIND ;    delay16 (); 
MyBuff_ADC[ 111 ] = PIND ;    delay16 (); 
MyBuff_ADC[ 112 ] = PIND ;    delay16 (); 
MyBuff_ADC[ 113 ] = PIND ;    delay16 (); 
MyBuff_ADC[ 114 ] = PIND ;    delay16 (); 
MyBuff_ADC[ 115 ] = PIND ;    delay16 (); 
MyBuff_ADC[ 116 ] = PIND ;    delay16 (); 
MyBuff_ADC[ 117 ] = PIND ;    delay16 (); 
MyBuff_ADC[ 118 ] = PIND ;    delay16 (); 
MyBuff_ADC[ 119 ] = PIND ;    delay16 (); 
MyBuff_ADC[ 120 ] = PIND ;    delay16 (); 
MyBuff_ADC[ 121 ] = PIND ;    delay16 (); 
MyBuff_ADC[ 122 ] = PIND ;    delay16 (); 
MyBuff_ADC[ 123 ] = PIND ;    delay16 (); 
MyBuff_ADC[ 124 ] = PIND ;    delay16 (); 
MyBuff_ADC[ 125 ] = PIND ;    delay16 (); 
MyBuff_ADC[ 126 ] = PIND ;    delay16 (); 
MyBuff_ADC[ 127 ] = PIND ;    delay16 (); 
MyBuff_ADC[ 128 ] = PIND ;    delay16 (); 
MyBuff_ADC[ 129 ] = PIND ;    delay16 (); 
MyBuff_ADC[ 130 ] = PIND ;    delay16 (); 
MyBuff_ADC[ 131 ] = PIND ;    delay16 (); 
MyBuff_ADC[ 132 ] = PIND ;    delay16 (); 
MyBuff_ADC[ 133 ] = PIND ;    delay16 (); 
MyBuff_ADC[ 134 ] = PIND ;    delay16 (); 
MyBuff_ADC[ 135 ] = PIND ;    delay16 (); 
MyBuff_ADC[ 136 ] = PIND ;    delay16 (); 
MyBuff_ADC[ 137 ] = PIND ;    delay16 (); 
MyBuff_ADC[ 138 ] = PIND ;    delay16 (); 
MyBuff_ADC[ 139 ] = PIND ;    delay16 (); 
MyBuff_ADC[ 140 ] = PIND ;    delay16 (); 
MyBuff_ADC[ 141 ] = PIND ;    delay16 (); 
MyBuff_ADC[ 142 ] = PIND ;    delay16 (); 
MyBuff_ADC[ 143 ] = PIND ;    delay16 (); 
MyBuff_ADC[ 144 ] = PIND ;    delay16 (); 
MyBuff_ADC[ 145 ] = PIND ;    delay16 (); 
MyBuff_ADC[ 146 ] = PIND ;    delay16 (); 
MyBuff_ADC[ 147 ] = PIND ;    delay16 (); 
MyBuff_ADC[ 148 ] = PIND ;    delay16 (); 
MyBuff_ADC[ 149 ] = PIND ;    delay16 (); 
MyBuff_ADC[ 150 ] = PIND ;    delay16 (); 
MyBuff_ADC[ 151 ] = PIND ;    delay16 (); 
MyBuff_ADC[ 152 ] = PIND ;    delay16 (); 
MyBuff_ADC[ 153 ] = PIND ;    delay16 (); 
MyBuff_ADC[ 154 ] = PIND ;    delay16 (); 
MyBuff_ADC[ 155 ] = PIND ;    delay16 (); 
MyBuff_ADC[ 156 ] = PIND ;    delay16 (); 
MyBuff_ADC[ 157 ] = PIND ;    delay16 (); 
MyBuff_ADC[ 158 ] = PIND ;    delay16 (); 
MyBuff_ADC[ 159 ] = PIND ;    delay16 (); 
MyBuff_ADC[ 160 ] = PIND ;    delay16 (); 
MyBuff_ADC[ 161 ] = PIND ;    delay16 (); 
MyBuff_ADC[ 162 ] = PIND ;    delay16 (); 
MyBuff_ADC[ 163 ] = PIND ;    delay16 (); 
MyBuff_ADC[ 164 ] = PIND ;    delay16 (); 
MyBuff_ADC[ 165 ] = PIND ;    delay16 (); 
MyBuff_ADC[ 166 ] = PIND ;    delay16 (); 
MyBuff_ADC[ 167 ] = PIND ;    delay16 (); 
MyBuff_ADC[ 168 ] = PIND ;    delay16 (); 
MyBuff_ADC[ 169 ] = PIND ;    delay16 (); 
MyBuff_ADC[ 170 ] = PIND ;    delay16 (); 
MyBuff_ADC[ 171 ] = PIND ;    delay16 (); 
MyBuff_ADC[ 172 ] = PIND ;    delay16 (); 
MyBuff_ADC[ 173 ] = PIND ;    delay16 (); 
MyBuff_ADC[ 174 ] = PIND ;    delay16 (); 
MyBuff_ADC[ 175 ] = PIND ;    delay16 (); 
MyBuff_ADC[ 176 ] = PIND ;    delay16 (); 
MyBuff_ADC[ 177 ] = PIND ;    delay16 (); 
MyBuff_ADC[ 178 ] = PIND ;    delay16 (); 
MyBuff_ADC[ 179 ] = PIND ;    delay16 (); 
MyBuff_ADC[ 180 ] = PIND ;    delay16 (); 
MyBuff_ADC[ 181 ] = PIND ;    delay16 (); 
MyBuff_ADC[ 182 ] = PIND ;    delay16 (); 
MyBuff_ADC[ 183 ] = PIND ;    delay16 (); 
MyBuff_ADC[ 184 ] = PIND ;    delay16 (); 
MyBuff_ADC[ 185 ] = PIND ;    delay16 (); 
MyBuff_ADC[ 186 ] = PIND ;    delay16 (); 
MyBuff_ADC[ 187 ] = PIND ;    delay16 (); 
MyBuff_ADC[ 188 ] = PIND ;    delay16 (); 
MyBuff_ADC[ 189 ] = PIND ;    delay16 (); 
MyBuff_ADC[ 190 ] = PIND ;    delay16 (); 
MyBuff_ADC[ 191 ] = PIND ;    delay16 (); 
MyBuff_ADC[ 192 ] = PIND ;    delay16 (); 
MyBuff_ADC[ 193 ] = PIND ;    delay16 (); 
MyBuff_ADC[ 194 ] = PIND ;    delay16 (); 
MyBuff_ADC[ 195 ] = PIND ;    delay16 (); 
MyBuff_ADC[ 196 ] = PIND ;    delay16 (); 
MyBuff_ADC[ 197 ] = PIND ;    delay16 (); 
MyBuff_ADC[ 198 ] = PIND ;    delay16 (); 
MyBuff_ADC[ 199 ] = PIND ;    delay16 (); 
MyBuff_ADC[ 200 ] = PIND ;    delay16 (); 
MyBuff_ADC[ 201 ] = PIND ;    delay16 (); 
MyBuff_ADC[ 202 ] = PIND ;    delay16 (); 
MyBuff_ADC[ 203 ] = PIND ;    delay16 (); 
MyBuff_ADC[ 204 ] = PIND ;    delay16 (); 
MyBuff_ADC[ 205 ] = PIND ;    delay16 (); 
MyBuff_ADC[ 206 ] = PIND ;    delay16 (); 
MyBuff_ADC[ 207 ] = PIND ;    delay16 (); 
MyBuff_ADC[ 208 ] = PIND ;    delay16 (); 
MyBuff_ADC[ 209 ] = PIND ;    delay16 (); 
MyBuff_ADC[ 210 ] = PIND ;    delay16 (); 
MyBuff_ADC[ 211 ] = PIND ;    delay16 (); 
MyBuff_ADC[ 212 ] = PIND ;    delay16 (); 
MyBuff_ADC[ 213 ] = PIND ;    delay16 (); 
MyBuff_ADC[ 214 ] = PIND ;    delay16 (); 
MyBuff_ADC[ 215 ] = PIND ;    delay16 (); 
MyBuff_ADC[ 216 ] = PIND ;    delay16 (); 
MyBuff_ADC[ 217 ] = PIND ;    delay16 (); 
MyBuff_ADC[ 218 ] = PIND ;    delay16 (); 
MyBuff_ADC[ 219 ] = PIND ;    delay16 (); 
MyBuff_ADC[ 220 ] = PIND ;    delay16 (); 
MyBuff_ADC[ 221 ] = PIND ;    delay16 (); 
MyBuff_ADC[ 222 ] = PIND ;    delay16 (); 
MyBuff_ADC[ 223 ] = PIND ;    delay16 (); 
MyBuff_ADC[ 224 ] = PIND ;    delay16 (); 
MyBuff_ADC[ 225 ] = PIND ;    delay16 (); 
MyBuff_ADC[ 226 ] = PIND ;    delay16 (); 
MyBuff_ADC[ 227 ] = PIND ;    delay16 (); 
MyBuff_ADC[ 228 ] = PIND ;    delay16 (); 
MyBuff_ADC[ 229 ] = PIND ;    delay16 (); 
MyBuff_ADC[ 230 ] = PIND ;    delay16 (); 
MyBuff_ADC[ 231 ] = PIND ;    delay16 (); 
MyBuff_ADC[ 232 ] = PIND ;    delay16 (); 
MyBuff_ADC[ 233 ] = PIND ;    delay16 (); 
MyBuff_ADC[ 234 ] = PIND ;    delay16 (); 
MyBuff_ADC[ 235 ] = PIND ;    delay16 (); 
MyBuff_ADC[ 236 ] = PIND ;    delay16 (); 
MyBuff_ADC[ 237 ] = PIND ;    delay16 (); 
MyBuff_ADC[ 238 ] = PIND ;    delay16 (); 
MyBuff_ADC[ 239 ] = PIND ;    delay16 (); 
MyBuff_ADC[ 240 ] = PIND ;    delay16 (); 
MyBuff_ADC[ 241 ] = PIND ;    delay16 (); 
MyBuff_ADC[ 242 ] = PIND ;    delay16 (); 
MyBuff_ADC[ 243 ] = PIND ;    delay16 (); 
MyBuff_ADC[ 244 ] = PIND ;    delay16 (); 
MyBuff_ADC[ 245 ] = PIND ;    delay16 (); 
MyBuff_ADC[ 246 ] = PIND ;    delay16 (); 
MyBuff_ADC[ 247 ] = PIND ;    delay16 (); 
MyBuff_ADC[ 248 ] = PIND ;    delay16 (); 
MyBuff_ADC[ 249 ] = PIND ;    delay16 (); 
MyBuff_ADC[ 250 ] = PIND ;    delay16 (); 
MyBuff_ADC[ 251 ] = PIND ;    delay16 (); 
MyBuff_ADC[ 252 ] = PIND ;    delay16 (); 
MyBuff_ADC[ 253 ] = PIND ;    delay16 (); 
MyBuff_ADC[ 254 ] = PIND ;    delay16 (); 
MyBuff_ADC[ 255 ] = PIND ;    delay16 (); 
}



void LoadPin32()
{
 delay32 ();  MyBuff_ADC[  0 ] = PIND ;     MyBuff_AI0[ 0 ] = ADCH;
 delay32 ();  MyBuff_ADC[ 1 ] = PIND ;      MyBuff_AI0[ 1 ] = ADCH;
 delay32 ();  MyBuff_ADC[ 2 ] = PIND ;      MyBuff_AI0[ 2 ] = ADCH;
 delay32 ();  MyBuff_ADC[ 3 ] = PIND ;      MyBuff_AI0[ 3 ] = ADCH;
 delay32 ();  MyBuff_ADC[ 4 ] = PIND ;      MyBuff_AI0[ 4 ] = ADCH;
 delay32 ();  MyBuff_ADC[ 5 ] = PIND ;      MyBuff_AI0[ 5 ] = ADCH;
 delay32 ();  MyBuff_ADC[ 6 ] = PIND ;      MyBuff_AI0[ 6 ] = ADCH;
 delay32 ();  MyBuff_ADC[ 7 ] = PIND ;      MyBuff_AI0[ 7 ] = ADCH;
 delay32 ();  MyBuff_ADC[ 8 ] = PIND ;      MyBuff_AI0[ 8 ] = ADCH;
 delay32 ();  MyBuff_ADC[ 9 ] = PIND ;      MyBuff_AI0[ 9 ] = ADCH;
 delay32 ();  MyBuff_ADC[ 10  ] = PIND ;      MyBuff_AI0[ 10  ] = ADCH;
 delay32 ();  MyBuff_ADC[ 11  ] = PIND ;      MyBuff_AI0[ 11  ] = ADCH;
 delay32 ();  MyBuff_ADC[ 12  ] = PIND ;      MyBuff_AI0[ 12  ] = ADCH;
 delay32 ();  MyBuff_ADC[ 13  ] = PIND ;      MyBuff_AI0[ 13  ] = ADCH;
 delay32 ();  MyBuff_ADC[ 14  ] = PIND ;      MyBuff_AI0[ 14  ] = ADCH;
 delay32 ();  MyBuff_ADC[ 15  ] = PIND ;      MyBuff_AI0[ 15  ] = ADCH;
 delay32 ();  MyBuff_ADC[ 16  ] = PIND ;      MyBuff_AI0[ 16  ] = ADCH;
 delay32 ();  MyBuff_ADC[ 17  ] = PIND ;      MyBuff_AI0[ 17  ] = ADCH;
 delay32 ();  MyBuff_ADC[ 18  ] = PIND ;      MyBuff_AI0[ 18  ] = ADCH;
 delay32 ();  MyBuff_ADC[ 19  ] = PIND ;      MyBuff_AI0[ 19  ] = ADCH;
 delay32 ();  MyBuff_ADC[ 20  ] = PIND ;      MyBuff_AI0[ 20  ] = ADCH;
 delay32 ();  MyBuff_ADC[ 21  ] = PIND ;      MyBuff_AI0[ 21  ] = ADCH;
 delay32 ();  MyBuff_ADC[ 22  ] = PIND ;      MyBuff_AI0[ 22  ] = ADCH;
 delay32 ();  MyBuff_ADC[ 23  ] = PIND ;      MyBuff_AI0[ 23  ] = ADCH;
 delay32 ();  MyBuff_ADC[ 24  ] = PIND ;      MyBuff_AI0[ 24  ] = ADCH;
 delay32 ();  MyBuff_ADC[ 25  ] = PIND ;      MyBuff_AI0[ 25  ] = ADCH;
 delay32 ();  MyBuff_ADC[ 26  ] = PIND ;      MyBuff_AI0[ 26  ] = ADCH;
 delay32 ();  MyBuff_ADC[ 27  ] = PIND ;      MyBuff_AI0[ 27  ] = ADCH;
 delay32 ();  MyBuff_ADC[ 28  ] = PIND ;      MyBuff_AI0[ 28  ] = ADCH;
 delay32 ();  MyBuff_ADC[ 29  ] = PIND ;      MyBuff_AI0[ 29  ] = ADCH;
 delay32 ();  MyBuff_ADC[ 30  ] = PIND ;      MyBuff_AI0[ 30  ] = ADCH;
 delay32 ();  MyBuff_ADC[ 31  ] = PIND ;      MyBuff_AI0[ 31  ] = ADCH;
 delay32 ();  MyBuff_ADC[ 32  ] = PIND ;      MyBuff_AI0[ 32  ] = ADCH;
 delay32 ();  MyBuff_ADC[ 33  ] = PIND ;      MyBuff_AI0[ 33  ] = ADCH;
 delay32 ();  MyBuff_ADC[ 34  ] = PIND ;      MyBuff_AI0[ 34  ] = ADCH;
 delay32 ();  MyBuff_ADC[ 35  ] = PIND ;      MyBuff_AI0[ 35  ] = ADCH;
 delay32 ();  MyBuff_ADC[ 36  ] = PIND ;      MyBuff_AI0[ 36  ] = ADCH;
 delay32 ();  MyBuff_ADC[ 37  ] = PIND ;      MyBuff_AI0[ 37  ] = ADCH;
 delay32 ();  MyBuff_ADC[ 38  ] = PIND ;      MyBuff_AI0[ 38  ] = ADCH;
 delay32 ();  MyBuff_ADC[ 39  ] = PIND ;      MyBuff_AI0[ 39  ] = ADCH;
 delay32 ();  MyBuff_ADC[ 40  ] = PIND ;      MyBuff_AI0[ 40  ] = ADCH;
 delay32 ();  MyBuff_ADC[ 41  ] = PIND ;      MyBuff_AI0[ 41  ] = ADCH;
 delay32 ();  MyBuff_ADC[ 42  ] = PIND ;      MyBuff_AI0[ 42  ] = ADCH;
 delay32 ();  MyBuff_ADC[ 43  ] = PIND ;      MyBuff_AI0[ 43  ] = ADCH;
 delay32 ();  MyBuff_ADC[ 44  ] = PIND ;      MyBuff_AI0[ 44  ] = ADCH;
 delay32 ();  MyBuff_ADC[ 45  ] = PIND ;      MyBuff_AI0[ 45  ] = ADCH;
 delay32 ();  MyBuff_ADC[ 46  ] = PIND ;      MyBuff_AI0[ 46  ] = ADCH;
 delay32 ();  MyBuff_ADC[ 47  ] = PIND ;      MyBuff_AI0[ 47  ] = ADCH;
 delay32 ();  MyBuff_ADC[ 48  ] = PIND ;      MyBuff_AI0[ 48  ] = ADCH;
 delay32 ();  MyBuff_ADC[ 49  ] = PIND ;      MyBuff_AI0[ 49  ] = ADCH;
 delay32 ();  MyBuff_ADC[ 50  ] = PIND ;      MyBuff_AI0[ 50  ] = ADCH;
 delay32 ();  MyBuff_ADC[ 51  ] = PIND ;      MyBuff_AI0[ 51  ] = ADCH;
 delay32 ();  MyBuff_ADC[ 52  ] = PIND ;      MyBuff_AI0[ 52  ] = ADCH;
 delay32 ();  MyBuff_ADC[ 53  ] = PIND ;      MyBuff_AI0[ 53  ] = ADCH;
 delay32 ();  MyBuff_ADC[ 54  ] = PIND ;      MyBuff_AI0[ 54  ] = ADCH;
 delay32 ();  MyBuff_ADC[ 55  ] = PIND ;      MyBuff_AI0[ 55  ] = ADCH;
 delay32 ();  MyBuff_ADC[ 56  ] = PIND ;      MyBuff_AI0[ 56  ] = ADCH;
 delay32 ();  MyBuff_ADC[ 57  ] = PIND ;      MyBuff_AI0[ 57  ] = ADCH;
 delay32 ();  MyBuff_ADC[ 58  ] = PIND ;      MyBuff_AI0[ 58  ] = ADCH;
 delay32 ();  MyBuff_ADC[ 59  ] = PIND ;      MyBuff_AI0[ 59  ] = ADCH;
 delay32 ();  MyBuff_ADC[ 60  ] = PIND ;      MyBuff_AI0[ 60  ] = ADCH;
 delay32 ();  MyBuff_ADC[ 61  ] = PIND ;      MyBuff_AI0[ 61  ] = ADCH;
 delay32 ();  MyBuff_ADC[ 62  ] = PIND ;      MyBuff_AI0[ 62  ] = ADCH;
 delay32 ();  MyBuff_ADC[ 63  ] = PIND ;      MyBuff_AI0[ 63  ] = ADCH;
 delay32 ();  MyBuff_ADC[ 64  ] = PIND ;      MyBuff_AI0[ 64  ] = ADCH;
 delay32 ();  MyBuff_ADC[ 65  ] = PIND ;      MyBuff_AI0[ 65  ] = ADCH;
 delay32 ();  MyBuff_ADC[ 66  ] = PIND ;      MyBuff_AI0[ 66  ] = ADCH;
 delay32 ();  MyBuff_ADC[ 67  ] = PIND ;      MyBuff_AI0[ 67  ] = ADCH;
 delay32 ();  MyBuff_ADC[ 68  ] = PIND ;      MyBuff_AI0[ 68  ] = ADCH;
 delay32 ();  MyBuff_ADC[ 69  ] = PIND ;      MyBuff_AI0[ 69  ] = ADCH;
 delay32 ();  MyBuff_ADC[ 70  ] = PIND ;      MyBuff_AI0[ 70  ] = ADCH;
 delay32 ();  MyBuff_ADC[ 71  ] = PIND ;      MyBuff_AI0[ 71  ] = ADCH;
 delay32 ();  MyBuff_ADC[ 72  ] = PIND ;      MyBuff_AI0[ 72  ] = ADCH;
 delay32 ();  MyBuff_ADC[ 73  ] = PIND ;      MyBuff_AI0[ 73  ] = ADCH;
 delay32 ();  MyBuff_ADC[ 74  ] = PIND ;      MyBuff_AI0[ 74  ] = ADCH;
 delay32 ();  MyBuff_ADC[ 75  ] = PIND ;      MyBuff_AI0[ 75  ] = ADCH;
 delay32 ();  MyBuff_ADC[ 76  ] = PIND ;      MyBuff_AI0[ 76  ] = ADCH;
 delay32 ();  MyBuff_ADC[ 77  ] = PIND ;      MyBuff_AI0[ 77  ] = ADCH;
 delay32 ();  MyBuff_ADC[ 78  ] = PIND ;      MyBuff_AI0[ 78  ] = ADCH;
 delay32 ();  MyBuff_ADC[ 79  ] = PIND ;      MyBuff_AI0[ 79  ] = ADCH;
 delay32 ();  MyBuff_ADC[ 80  ] = PIND ;      MyBuff_AI0[ 80  ] = ADCH;
 delay32 ();  MyBuff_ADC[ 81  ] = PIND ;      MyBuff_AI0[ 81  ] = ADCH;
 delay32 ();  MyBuff_ADC[ 82  ] = PIND ;      MyBuff_AI0[ 82  ] = ADCH;
 delay32 ();  MyBuff_ADC[ 83  ] = PIND ;      MyBuff_AI0[ 83  ] = ADCH;
 delay32 ();  MyBuff_ADC[ 84  ] = PIND ;      MyBuff_AI0[ 84  ] = ADCH;
 delay32 ();  MyBuff_ADC[ 85  ] = PIND ;      MyBuff_AI0[ 85  ] = ADCH;
 delay32 ();  MyBuff_ADC[ 86  ] = PIND ;      MyBuff_AI0[ 86  ] = ADCH;
 delay32 ();  MyBuff_ADC[ 87  ] = PIND ;      MyBuff_AI0[ 87  ] = ADCH;
 delay32 ();  MyBuff_ADC[ 88  ] = PIND ;      MyBuff_AI0[ 88  ] = ADCH;
 delay32 ();  MyBuff_ADC[ 89  ] = PIND ;      MyBuff_AI0[ 89  ] = ADCH;
 delay32 ();  MyBuff_ADC[ 90  ] = PIND ;      MyBuff_AI0[ 90  ] = ADCH;
 delay32 ();  MyBuff_ADC[ 91  ] = PIND ;      MyBuff_AI0[ 91  ] = ADCH;
 delay32 ();  MyBuff_ADC[ 92  ] = PIND ;      MyBuff_AI0[ 92  ] = ADCH;
 delay32 ();  MyBuff_ADC[ 93  ] = PIND ;      MyBuff_AI0[ 93  ] = ADCH;
 delay32 ();  MyBuff_ADC[ 94  ] = PIND ;      MyBuff_AI0[ 94  ] = ADCH;
 delay32 ();  MyBuff_ADC[ 95  ] = PIND ;      MyBuff_AI0[ 95  ] = ADCH;
 delay32 ();  MyBuff_ADC[ 96  ] = PIND ;      MyBuff_AI0[ 96  ] = ADCH;
 delay32 ();  MyBuff_ADC[ 97  ] = PIND ;      MyBuff_AI0[ 97  ] = ADCH;
 delay32 ();  MyBuff_ADC[ 98  ] = PIND ;      MyBuff_AI0[ 98  ] = ADCH;
 delay32 ();  MyBuff_ADC[ 99  ] = PIND ;      MyBuff_AI0[ 99  ] = ADCH;
 delay32 ();  MyBuff_ADC[ 100 ] = PIND ;      MyBuff_AI0[ 100 ] = ADCH;
 delay32 ();  MyBuff_ADC[ 101 ] = PIND ;      MyBuff_AI0[ 101 ] = ADCH;
 delay32 ();  MyBuff_ADC[ 102 ] = PIND ;      MyBuff_AI0[ 102 ] = ADCH;
 delay32 ();  MyBuff_ADC[ 103 ] = PIND ;      MyBuff_AI0[ 103 ] = ADCH;
 delay32 ();  MyBuff_ADC[ 104 ] = PIND ;      MyBuff_AI0[ 104 ] = ADCH;
 delay32 ();  MyBuff_ADC[ 105 ] = PIND ;      MyBuff_AI0[ 105 ] = ADCH;
 delay32 ();  MyBuff_ADC[ 106 ] = PIND ;      MyBuff_AI0[ 106 ] = ADCH;
 delay32 ();  MyBuff_ADC[ 107 ] = PIND ;      MyBuff_AI0[ 107 ] = ADCH;
 delay32 ();  MyBuff_ADC[ 108 ] = PIND ;      MyBuff_AI0[ 108 ] = ADCH;
 delay32 ();  MyBuff_ADC[ 109 ] = PIND ;      MyBuff_AI0[ 109 ] = ADCH;
 delay32 ();  MyBuff_ADC[ 110 ] = PIND ;      MyBuff_AI0[ 110 ] = ADCH;
 delay32 ();  MyBuff_ADC[ 111 ] = PIND ;      MyBuff_AI0[ 111 ] = ADCH;
 delay32 ();  MyBuff_ADC[ 112 ] = PIND ;      MyBuff_AI0[ 112 ] = ADCH;
 delay32 ();  MyBuff_ADC[ 113 ] = PIND ;      MyBuff_AI0[ 113 ] = ADCH;
 delay32 ();  MyBuff_ADC[ 114 ] = PIND ;      MyBuff_AI0[ 114 ] = ADCH;
 delay32 ();  MyBuff_ADC[ 115 ] = PIND ;      MyBuff_AI0[ 115 ] = ADCH;
 delay32 ();  MyBuff_ADC[ 116 ] = PIND ;      MyBuff_AI0[ 116 ] = ADCH;
 delay32 ();  MyBuff_ADC[ 117 ] = PIND ;      MyBuff_AI0[ 117 ] = ADCH;
 delay32 ();  MyBuff_ADC[ 118 ] = PIND ;      MyBuff_AI0[ 118 ] = ADCH;
 delay32 ();  MyBuff_ADC[ 119 ] = PIND ;      MyBuff_AI0[ 119 ] = ADCH;
 delay32 ();  MyBuff_ADC[ 120 ] = PIND ;      MyBuff_AI0[ 120 ] = ADCH;
 delay32 ();  MyBuff_ADC[ 121 ] = PIND ;      MyBuff_AI0[ 121 ] = ADCH;
 delay32 ();  MyBuff_ADC[ 122 ] = PIND ;      MyBuff_AI0[ 122 ] = ADCH;
 delay32 ();  MyBuff_ADC[ 123 ] = PIND ;      MyBuff_AI0[ 123 ] = ADCH;
 delay32 ();  MyBuff_ADC[ 124 ] = PIND ;      MyBuff_AI0[ 124 ] = ADCH;
 delay32 ();  MyBuff_ADC[ 125 ] = PIND ;      MyBuff_AI0[ 125 ] = ADCH;
 delay32 ();  MyBuff_ADC[ 126 ] = PIND ;      MyBuff_AI0[ 126 ] = ADCH;
 delay32 ();  MyBuff_ADC[ 127 ] = PIND ;      MyBuff_AI0[ 127 ] = ADCH;
 delay32 ();  MyBuff_ADC[ 128 ] = PIND ;      MyBuff_AI0[ 128 ] = ADCH;
 delay32 ();  MyBuff_ADC[ 129 ] = PIND ;      MyBuff_AI0[ 129 ] = ADCH;
 delay32 ();  MyBuff_ADC[ 130 ] = PIND ;      MyBuff_AI0[ 130 ] = ADCH;
 delay32 ();  MyBuff_ADC[ 131 ] = PIND ;      MyBuff_AI0[ 131 ] = ADCH;
 delay32 ();  MyBuff_ADC[ 132 ] = PIND ;      MyBuff_AI0[ 132 ] = ADCH;
 delay32 ();  MyBuff_ADC[ 133 ] = PIND ;      MyBuff_AI0[ 133 ] = ADCH;
 delay32 ();  MyBuff_ADC[ 134 ] = PIND ;      MyBuff_AI0[ 134 ] = ADCH;
 delay32 ();  MyBuff_ADC[ 135 ] = PIND ;      MyBuff_AI0[ 135 ] = ADCH;
 delay32 ();  MyBuff_ADC[ 136 ] = PIND ;      MyBuff_AI0[ 136 ] = ADCH;
 delay32 ();  MyBuff_ADC[ 137 ] = PIND ;      MyBuff_AI0[ 137 ] = ADCH;
 delay32 ();  MyBuff_ADC[ 138 ] = PIND ;      MyBuff_AI0[ 138 ] = ADCH;
 delay32 ();  MyBuff_ADC[ 139 ] = PIND ;      MyBuff_AI0[ 139 ] = ADCH;
 delay32 ();  MyBuff_ADC[ 140 ] = PIND ;      MyBuff_AI0[ 140 ] = ADCH;
 delay32 ();  MyBuff_ADC[ 141 ] = PIND ;      MyBuff_AI0[ 141 ] = ADCH;
 delay32 ();  MyBuff_ADC[ 142 ] = PIND ;      MyBuff_AI0[ 142 ] = ADCH;
 delay32 ();  MyBuff_ADC[ 143 ] = PIND ;      MyBuff_AI0[ 143 ] = ADCH;
 delay32 ();  MyBuff_ADC[ 144 ] = PIND ;      MyBuff_AI0[ 144 ] = ADCH;
 delay32 ();  MyBuff_ADC[ 145 ] = PIND ;      MyBuff_AI0[ 145 ] = ADCH;
 delay32 ();  MyBuff_ADC[ 146 ] = PIND ;      MyBuff_AI0[ 146 ] = ADCH;
 delay32 ();  MyBuff_ADC[ 147 ] = PIND ;      MyBuff_AI0[ 147 ] = ADCH;
 delay32 ();  MyBuff_ADC[ 148 ] = PIND ;      MyBuff_AI0[ 148 ] = ADCH;
 delay32 ();  MyBuff_ADC[ 149 ] = PIND ;      MyBuff_AI0[ 149 ] = ADCH;
 delay32 ();  MyBuff_ADC[ 150 ] = PIND ;      MyBuff_AI0[ 150 ] = ADCH;
 delay32 ();  MyBuff_ADC[ 151 ] = PIND ;      MyBuff_AI0[ 151 ] = ADCH;
 delay32 ();  MyBuff_ADC[ 152 ] = PIND ;      MyBuff_AI0[ 152 ] = ADCH;
 delay32 ();  MyBuff_ADC[ 153 ] = PIND ;      MyBuff_AI0[ 153 ] = ADCH;
 delay32 ();  MyBuff_ADC[ 154 ] = PIND ;      MyBuff_AI0[ 154 ] = ADCH;
 delay32 ();  MyBuff_ADC[ 155 ] = PIND ;      MyBuff_AI0[ 155 ] = ADCH;
 delay32 ();  MyBuff_ADC[ 156 ] = PIND ;      MyBuff_AI0[ 156 ] = ADCH;
 delay32 ();  MyBuff_ADC[ 157 ] = PIND ;      MyBuff_AI0[ 157 ] = ADCH;
 delay32 ();  MyBuff_ADC[ 158 ] = PIND ;      MyBuff_AI0[ 158 ] = ADCH;
 delay32 ();  MyBuff_ADC[ 159 ] = PIND ;      MyBuff_AI0[ 159 ] = ADCH;
 delay32 ();  MyBuff_ADC[ 160 ] = PIND ;      MyBuff_AI0[ 160 ] = ADCH;
 delay32 ();  MyBuff_ADC[ 161 ] = PIND ;      MyBuff_AI0[ 161 ] = ADCH;
 delay32 ();  MyBuff_ADC[ 162 ] = PIND ;      MyBuff_AI0[ 162 ] = ADCH;
 delay32 ();  MyBuff_ADC[ 163 ] = PIND ;      MyBuff_AI0[ 163 ] = ADCH;
 delay32 ();  MyBuff_ADC[ 164 ] = PIND ;      MyBuff_AI0[ 164 ] = ADCH;
 delay32 ();  MyBuff_ADC[ 165 ] = PIND ;      MyBuff_AI0[ 165 ] = ADCH;
 delay32 ();  MyBuff_ADC[ 166 ] = PIND ;      MyBuff_AI0[ 166 ] = ADCH;
 delay32 ();  MyBuff_ADC[ 167 ] = PIND ;      MyBuff_AI0[ 167 ] = ADCH;
 delay32 ();  MyBuff_ADC[ 168 ] = PIND ;      MyBuff_AI0[ 168 ] = ADCH;
 delay32 ();  MyBuff_ADC[ 169 ] = PIND ;      MyBuff_AI0[ 169 ] = ADCH;
 delay32 ();  MyBuff_ADC[ 170 ] = PIND ;      MyBuff_AI0[ 170 ] = ADCH;
 delay32 ();  MyBuff_ADC[ 171 ] = PIND ;      MyBuff_AI0[ 171 ] = ADCH;
 delay32 ();  MyBuff_ADC[ 172 ] = PIND ;      MyBuff_AI0[ 172 ] = ADCH;
 delay32 ();  MyBuff_ADC[ 173 ] = PIND ;      MyBuff_AI0[ 173 ] = ADCH;
 delay32 ();  MyBuff_ADC[ 174 ] = PIND ;      MyBuff_AI0[ 174 ] = ADCH;
 delay32 ();  MyBuff_ADC[ 175 ] = PIND ;      MyBuff_AI0[ 175 ] = ADCH;
 delay32 ();  MyBuff_ADC[ 176 ] = PIND ;      MyBuff_AI0[ 176 ] = ADCH;
 delay32 ();  MyBuff_ADC[ 177 ] = PIND ;      MyBuff_AI0[ 177 ] = ADCH;
 delay32 ();  MyBuff_ADC[ 178 ] = PIND ;      MyBuff_AI0[ 178 ] = ADCH;
 delay32 ();  MyBuff_ADC[ 179 ] = PIND ;      MyBuff_AI0[ 179 ] = ADCH;
 delay32 ();  MyBuff_ADC[ 180 ] = PIND ;      MyBuff_AI0[ 180 ] = ADCH;
 delay32 ();  MyBuff_ADC[ 181 ] = PIND ;      MyBuff_AI0[ 181 ] = ADCH;
 delay32 ();  MyBuff_ADC[ 182 ] = PIND ;      MyBuff_AI0[ 182 ] = ADCH;
 delay32 ();  MyBuff_ADC[ 183 ] = PIND ;      MyBuff_AI0[ 183 ] = ADCH;
 delay32 ();  MyBuff_ADC[ 184 ] = PIND ;      MyBuff_AI0[ 184 ] = ADCH;
 delay32 ();  MyBuff_ADC[ 185 ] = PIND ;      MyBuff_AI0[ 185 ] = ADCH;
 delay32 ();  MyBuff_ADC[ 186 ] = PIND ;      MyBuff_AI0[ 186 ] = ADCH;
 delay32 ();  MyBuff_ADC[ 187 ] = PIND ;      MyBuff_AI0[ 187 ] = ADCH;
 delay32 ();  MyBuff_ADC[ 188 ] = PIND ;      MyBuff_AI0[ 188 ] = ADCH;
 delay32 ();  MyBuff_ADC[ 189 ] = PIND ;      MyBuff_AI0[ 189 ] = ADCH;
 delay32 ();  MyBuff_ADC[ 190 ] = PIND ;      MyBuff_AI0[ 190 ] = ADCH;
 delay32 ();  MyBuff_ADC[ 191 ] = PIND ;      MyBuff_AI0[ 191 ] = ADCH;
 delay32 ();  MyBuff_ADC[ 192 ] = PIND ;      MyBuff_AI0[ 192 ] = ADCH;
 delay32 ();  MyBuff_ADC[ 193 ] = PIND ;      MyBuff_AI0[ 193 ] = ADCH;
 delay32 ();  MyBuff_ADC[ 194 ] = PIND ;      MyBuff_AI0[ 194 ] = ADCH;
 delay32 ();  MyBuff_ADC[ 195 ] = PIND ;      MyBuff_AI0[ 195 ] = ADCH;
 delay32 ();  MyBuff_ADC[ 196 ] = PIND ;      MyBuff_AI0[ 196 ] = ADCH;
 delay32 ();  MyBuff_ADC[ 197 ] = PIND ;      MyBuff_AI0[ 197 ] = ADCH;
 delay32 ();  MyBuff_ADC[ 198 ] = PIND ;      MyBuff_AI0[ 198 ] = ADCH;
 delay32 ();  MyBuff_ADC[ 199 ] = PIND ;      MyBuff_AI0[ 199 ] = ADCH;
 delay32 ();  MyBuff_ADC[ 200 ] = PIND ;      MyBuff_AI0[ 200 ] = ADCH;
 delay32 ();  MyBuff_ADC[ 201 ] = PIND ;      MyBuff_AI0[ 201 ] = ADCH;
 delay32 ();  MyBuff_ADC[ 202 ] = PIND ;      MyBuff_AI0[ 202 ] = ADCH;
 delay32 ();  MyBuff_ADC[ 203 ] = PIND ;      MyBuff_AI0[ 203 ] = ADCH;
 delay32 ();  MyBuff_ADC[ 204 ] = PIND ;      MyBuff_AI0[ 204 ] = ADCH;
 delay32 ();  MyBuff_ADC[ 205 ] = PIND ;      MyBuff_AI0[ 205 ] = ADCH;
 delay32 ();  MyBuff_ADC[ 206 ] = PIND ;      MyBuff_AI0[ 206 ] = ADCH;
 delay32 ();  MyBuff_ADC[ 207 ] = PIND ;      MyBuff_AI0[ 207 ] = ADCH;
 delay32 ();  MyBuff_ADC[ 208 ] = PIND ;      MyBuff_AI0[ 208 ] = ADCH;
 delay32 ();  MyBuff_ADC[ 209 ] = PIND ;      MyBuff_AI0[ 209 ] = ADCH;
 delay32 ();  MyBuff_ADC[ 210 ] = PIND ;      MyBuff_AI0[ 210 ] = ADCH;
 delay32 ();  MyBuff_ADC[ 211 ] = PIND ;      MyBuff_AI0[ 211 ] = ADCH;
 delay32 ();  MyBuff_ADC[ 212 ] = PIND ;      MyBuff_AI0[ 212 ] = ADCH;
 delay32 ();  MyBuff_ADC[ 213 ] = PIND ;      MyBuff_AI0[ 213 ] = ADCH;
 delay32 ();  MyBuff_ADC[ 214 ] = PIND ;      MyBuff_AI0[ 214 ] = ADCH;
 delay32 ();  MyBuff_ADC[ 215 ] = PIND ;      MyBuff_AI0[ 215 ] = ADCH;
 delay32 ();  MyBuff_ADC[ 216 ] = PIND ;      MyBuff_AI0[ 216 ] = ADCH;
 delay32 ();  MyBuff_ADC[ 217 ] = PIND ;      MyBuff_AI0[ 217 ] = ADCH;
 delay32 ();  MyBuff_ADC[ 218 ] = PIND ;      MyBuff_AI0[ 218 ] = ADCH;
 delay32 ();  MyBuff_ADC[ 219 ] = PIND ;      MyBuff_AI0[ 219 ] = ADCH;
 delay32 ();  MyBuff_ADC[ 220 ] = PIND ;      MyBuff_AI0[ 220 ] = ADCH;
 delay32 ();  MyBuff_ADC[ 221 ] = PIND ;      MyBuff_AI0[ 221 ] = ADCH;
 delay32 ();  MyBuff_ADC[ 222 ] = PIND ;      MyBuff_AI0[ 222 ] = ADCH;
 delay32 ();  MyBuff_ADC[ 223 ] = PIND ;      MyBuff_AI0[ 223 ] = ADCH;
 delay32 ();  MyBuff_ADC[ 224 ] = PIND ;      MyBuff_AI0[ 224 ] = ADCH;
 delay32 ();  MyBuff_ADC[ 225 ] = PIND ;      MyBuff_AI0[ 225 ] = ADCH;
 delay32 ();  MyBuff_ADC[ 226 ] = PIND ;      MyBuff_AI0[ 226 ] = ADCH;
 delay32 ();  MyBuff_ADC[ 227 ] = PIND ;      MyBuff_AI0[ 227 ] = ADCH;
 delay32 ();  MyBuff_ADC[ 228 ] = PIND ;      MyBuff_AI0[ 228 ] = ADCH;
 delay32 ();  MyBuff_ADC[ 229 ] = PIND ;      MyBuff_AI0[ 229 ] = ADCH;
 delay32 ();  MyBuff_ADC[ 230 ] = PIND ;      MyBuff_AI0[ 230 ] = ADCH;
 delay32 ();  MyBuff_ADC[ 231 ] = PIND ;      MyBuff_AI0[ 231 ] = ADCH;
 delay32 ();  MyBuff_ADC[ 232 ] = PIND ;      MyBuff_AI0[ 232 ] = ADCH;
 delay32 ();  MyBuff_ADC[ 233 ] = PIND ;      MyBuff_AI0[ 233 ] = ADCH;
 delay32 ();  MyBuff_ADC[ 234 ] = PIND ;      MyBuff_AI0[ 234 ] = ADCH;
 delay32 ();  MyBuff_ADC[ 235 ] = PIND ;      MyBuff_AI0[ 235 ] = ADCH;
 delay32 ();  MyBuff_ADC[ 236 ] = PIND ;      MyBuff_AI0[ 236 ] = ADCH;
 delay32 ();  MyBuff_ADC[ 237 ] = PIND ;      MyBuff_AI0[ 237 ] = ADCH;
 delay32 ();  MyBuff_ADC[ 238 ] = PIND ;      MyBuff_AI0[ 238 ] = ADCH;
 delay32 ();  MyBuff_ADC[ 239 ] = PIND ;      MyBuff_AI0[ 239 ] = ADCH;
 delay32 ();  MyBuff_ADC[ 240 ] = PIND ;      MyBuff_AI0[ 240 ] = ADCH;
 delay32 ();  MyBuff_ADC[ 241 ] = PIND ;      MyBuff_AI0[ 241 ] = ADCH;
 delay32 ();  MyBuff_ADC[ 242 ] = PIND ;      MyBuff_AI0[ 242 ] = ADCH;
 delay32 ();  MyBuff_ADC[ 243 ] = PIND ;      MyBuff_AI0[ 243 ] = ADCH;
 delay32 ();  MyBuff_ADC[ 244 ] = PIND ;      MyBuff_AI0[ 244 ] = ADCH;
 delay32 ();  MyBuff_ADC[ 245 ] = PIND ;      MyBuff_AI0[ 245 ] = ADCH;
 delay32 ();  MyBuff_ADC[ 246 ] = PIND ;      MyBuff_AI0[ 246 ] = ADCH;
 delay32 ();  MyBuff_ADC[ 247 ] = PIND ;      MyBuff_AI0[ 247 ] = ADCH;
 delay32 ();  MyBuff_ADC[ 248 ] = PIND ;      MyBuff_AI0[ 248 ] = ADCH;
 delay32 ();  MyBuff_ADC[ 249 ] = PIND ;      MyBuff_AI0[ 249 ] = ADCH;
 delay32 ();  MyBuff_ADC[ 250 ] = PIND ;      MyBuff_AI0[ 250 ] = ADCH;
 delay32 ();  MyBuff_ADC[ 251 ] = PIND ;      MyBuff_AI0[ 251 ] = ADCH;
 delay32 ();  MyBuff_ADC[ 252 ] = PIND ;      MyBuff_AI0[ 252 ] = ADCH;
 delay32 ();  MyBuff_ADC[ 253 ] = PIND ;      MyBuff_AI0[ 253 ] = ADCH;
 delay32 ();  MyBuff_ADC[ 254 ] = PIND ;      MyBuff_AI0[ 254 ] = ADCH;
 delay32 ();  MyBuff_ADC[ 255 ] = PIND ;      MyBuff_AI0[ 255 ] = ADCH;
 
  
}

void LoadPin64()
{
 delay64 ();  MyBuff_ADC[  0 ] = PIND ;     MyBuff_AI0[ 0 ] = ADCH;
 delay64 ();  MyBuff_ADC[ 1 ] = PIND ;      MyBuff_AI0[ 1 ] = ADCH;
 delay64 ();  MyBuff_ADC[ 2 ] = PIND ;      MyBuff_AI0[ 2 ] = ADCH;
 delay64 ();  MyBuff_ADC[ 3 ] = PIND ;      MyBuff_AI0[ 3 ] = ADCH;
 delay64 ();  MyBuff_ADC[ 4 ] = PIND ;      MyBuff_AI0[ 4 ] = ADCH;
 delay64 ();  MyBuff_ADC[ 5 ] = PIND ;      MyBuff_AI0[ 5 ] = ADCH;
 delay64 ();  MyBuff_ADC[ 6 ] = PIND ;      MyBuff_AI0[ 6 ] = ADCH;
 delay64 ();  MyBuff_ADC[ 7 ] = PIND ;      MyBuff_AI0[ 7 ] = ADCH;
 delay64 ();  MyBuff_ADC[ 8 ] = PIND ;      MyBuff_AI0[ 8 ] = ADCH;
 delay64 ();  MyBuff_ADC[ 9 ] = PIND ;      MyBuff_AI0[ 9 ] = ADCH;
 delay64 ();  MyBuff_ADC[ 10  ] = PIND ;      MyBuff_AI0[ 10  ] = ADCH;
 delay64 ();  MyBuff_ADC[ 11  ] = PIND ;      MyBuff_AI0[ 11  ] = ADCH;
 delay64 ();  MyBuff_ADC[ 12  ] = PIND ;      MyBuff_AI0[ 12  ] = ADCH;
 delay64 ();  MyBuff_ADC[ 13  ] = PIND ;      MyBuff_AI0[ 13  ] = ADCH;
 delay64 ();  MyBuff_ADC[ 14  ] = PIND ;      MyBuff_AI0[ 14  ] = ADCH;
 delay64 ();  MyBuff_ADC[ 15  ] = PIND ;      MyBuff_AI0[ 15  ] = ADCH;
 delay64 ();  MyBuff_ADC[ 16  ] = PIND ;      MyBuff_AI0[ 16  ] = ADCH;
 delay64 ();  MyBuff_ADC[ 17  ] = PIND ;      MyBuff_AI0[ 17  ] = ADCH;
 delay64 ();  MyBuff_ADC[ 18  ] = PIND ;      MyBuff_AI0[ 18  ] = ADCH;
 delay64 ();  MyBuff_ADC[ 19  ] = PIND ;      MyBuff_AI0[ 19  ] = ADCH;
 delay64 ();  MyBuff_ADC[ 20  ] = PIND ;      MyBuff_AI0[ 20  ] = ADCH;
 delay64 ();  MyBuff_ADC[ 21  ] = PIND ;      MyBuff_AI0[ 21  ] = ADCH;
 delay64 ();  MyBuff_ADC[ 22  ] = PIND ;      MyBuff_AI0[ 22  ] = ADCH;
 delay64 ();  MyBuff_ADC[ 23  ] = PIND ;      MyBuff_AI0[ 23  ] = ADCH;
 delay64 ();  MyBuff_ADC[ 24  ] = PIND ;      MyBuff_AI0[ 24  ] = ADCH;
 delay64 ();  MyBuff_ADC[ 25  ] = PIND ;      MyBuff_AI0[ 25  ] = ADCH;
 delay64 ();  MyBuff_ADC[ 26  ] = PIND ;      MyBuff_AI0[ 26  ] = ADCH;
 delay64 ();  MyBuff_ADC[ 27  ] = PIND ;      MyBuff_AI0[ 27  ] = ADCH;
 delay64 ();  MyBuff_ADC[ 28  ] = PIND ;      MyBuff_AI0[ 28  ] = ADCH;
 delay64 ();  MyBuff_ADC[ 29  ] = PIND ;      MyBuff_AI0[ 29  ] = ADCH;
 delay64 ();  MyBuff_ADC[ 30  ] = PIND ;      MyBuff_AI0[ 30  ] = ADCH;
 delay64 ();  MyBuff_ADC[ 31  ] = PIND ;      MyBuff_AI0[ 31  ] = ADCH;
 delay64 ();  MyBuff_ADC[ 32  ] = PIND ;      MyBuff_AI0[ 32  ] = ADCH;
 delay64 ();  MyBuff_ADC[ 33  ] = PIND ;      MyBuff_AI0[ 33  ] = ADCH;
 delay64 ();  MyBuff_ADC[ 34  ] = PIND ;      MyBuff_AI0[ 34  ] = ADCH;
 delay64 ();  MyBuff_ADC[ 35  ] = PIND ;      MyBuff_AI0[ 35  ] = ADCH;
 delay64 ();  MyBuff_ADC[ 36  ] = PIND ;      MyBuff_AI0[ 36  ] = ADCH;
 delay64 ();  MyBuff_ADC[ 37  ] = PIND ;      MyBuff_AI0[ 37  ] = ADCH;
 delay64 ();  MyBuff_ADC[ 38  ] = PIND ;      MyBuff_AI0[ 38  ] = ADCH;
 delay64 ();  MyBuff_ADC[ 39  ] = PIND ;      MyBuff_AI0[ 39  ] = ADCH;
 delay64 ();  MyBuff_ADC[ 40  ] = PIND ;      MyBuff_AI0[ 40  ] = ADCH;
 delay64 ();  MyBuff_ADC[ 41  ] = PIND ;      MyBuff_AI0[ 41  ] = ADCH;
 delay64 ();  MyBuff_ADC[ 42  ] = PIND ;      MyBuff_AI0[ 42  ] = ADCH;
 delay64 ();  MyBuff_ADC[ 43  ] = PIND ;      MyBuff_AI0[ 43  ] = ADCH;
 delay64 ();  MyBuff_ADC[ 44  ] = PIND ;      MyBuff_AI0[ 44  ] = ADCH;
 delay64 ();  MyBuff_ADC[ 45  ] = PIND ;      MyBuff_AI0[ 45  ] = ADCH;
 delay64 ();  MyBuff_ADC[ 46  ] = PIND ;      MyBuff_AI0[ 46  ] = ADCH;
 delay64 ();  MyBuff_ADC[ 47  ] = PIND ;      MyBuff_AI0[ 47  ] = ADCH;
 delay64 ();  MyBuff_ADC[ 48  ] = PIND ;      MyBuff_AI0[ 48  ] = ADCH;
 delay64 ();  MyBuff_ADC[ 49  ] = PIND ;      MyBuff_AI0[ 49  ] = ADCH;
 delay64 ();  MyBuff_ADC[ 50  ] = PIND ;      MyBuff_AI0[ 50  ] = ADCH;
 delay64 ();  MyBuff_ADC[ 51  ] = PIND ;      MyBuff_AI0[ 51  ] = ADCH;
 delay64 ();  MyBuff_ADC[ 52  ] = PIND ;      MyBuff_AI0[ 52  ] = ADCH;
 delay64 ();  MyBuff_ADC[ 53  ] = PIND ;      MyBuff_AI0[ 53  ] = ADCH;
 delay64 ();  MyBuff_ADC[ 54  ] = PIND ;      MyBuff_AI0[ 54  ] = ADCH;
 delay64 ();  MyBuff_ADC[ 55  ] = PIND ;      MyBuff_AI0[ 55  ] = ADCH;
 delay64 ();  MyBuff_ADC[ 56  ] = PIND ;      MyBuff_AI0[ 56  ] = ADCH;
 delay64 ();  MyBuff_ADC[ 57  ] = PIND ;      MyBuff_AI0[ 57  ] = ADCH;
 delay64 ();  MyBuff_ADC[ 58  ] = PIND ;      MyBuff_AI0[ 58  ] = ADCH;
 delay64 ();  MyBuff_ADC[ 59  ] = PIND ;      MyBuff_AI0[ 59  ] = ADCH;
 delay64 ();  MyBuff_ADC[ 60  ] = PIND ;      MyBuff_AI0[ 60  ] = ADCH;
 delay64 ();  MyBuff_ADC[ 61  ] = PIND ;      MyBuff_AI0[ 61  ] = ADCH;
 delay64 ();  MyBuff_ADC[ 62  ] = PIND ;      MyBuff_AI0[ 62  ] = ADCH;
 delay64 ();  MyBuff_ADC[ 63  ] = PIND ;      MyBuff_AI0[ 63  ] = ADCH;
 delay64 ();  MyBuff_ADC[ 64  ] = PIND ;      MyBuff_AI0[ 64  ] = ADCH;
 delay64 ();  MyBuff_ADC[ 65  ] = PIND ;      MyBuff_AI0[ 65  ] = ADCH;
 delay64 ();  MyBuff_ADC[ 66  ] = PIND ;      MyBuff_AI0[ 66  ] = ADCH;
 delay64 ();  MyBuff_ADC[ 67  ] = PIND ;      MyBuff_AI0[ 67  ] = ADCH;
 delay64 ();  MyBuff_ADC[ 68  ] = PIND ;      MyBuff_AI0[ 68  ] = ADCH;
 delay64 ();  MyBuff_ADC[ 69  ] = PIND ;      MyBuff_AI0[ 69  ] = ADCH;
 delay64 ();  MyBuff_ADC[ 70  ] = PIND ;      MyBuff_AI0[ 70  ] = ADCH;
 delay64 ();  MyBuff_ADC[ 71  ] = PIND ;      MyBuff_AI0[ 71  ] = ADCH;
 delay64 ();  MyBuff_ADC[ 72  ] = PIND ;      MyBuff_AI0[ 72  ] = ADCH;
 delay64 ();  MyBuff_ADC[ 73  ] = PIND ;      MyBuff_AI0[ 73  ] = ADCH;
 delay64 ();  MyBuff_ADC[ 74  ] = PIND ;      MyBuff_AI0[ 74  ] = ADCH;
 delay64 ();  MyBuff_ADC[ 75  ] = PIND ;      MyBuff_AI0[ 75  ] = ADCH;
 delay64 ();  MyBuff_ADC[ 76  ] = PIND ;      MyBuff_AI0[ 76  ] = ADCH;
 delay64 ();  MyBuff_ADC[ 77  ] = PIND ;      MyBuff_AI0[ 77  ] = ADCH;
 delay64 ();  MyBuff_ADC[ 78  ] = PIND ;      MyBuff_AI0[ 78  ] = ADCH;
 delay64 ();  MyBuff_ADC[ 79  ] = PIND ;      MyBuff_AI0[ 79  ] = ADCH;
 delay64 ();  MyBuff_ADC[ 80  ] = PIND ;      MyBuff_AI0[ 80  ] = ADCH;
 delay64 ();  MyBuff_ADC[ 81  ] = PIND ;      MyBuff_AI0[ 81  ] = ADCH;
 delay64 ();  MyBuff_ADC[ 82  ] = PIND ;      MyBuff_AI0[ 82  ] = ADCH;
 delay64 ();  MyBuff_ADC[ 83  ] = PIND ;      MyBuff_AI0[ 83  ] = ADCH;
 delay64 ();  MyBuff_ADC[ 84  ] = PIND ;      MyBuff_AI0[ 84  ] = ADCH;
 delay64 ();  MyBuff_ADC[ 85  ] = PIND ;      MyBuff_AI0[ 85  ] = ADCH;
 delay64 ();  MyBuff_ADC[ 86  ] = PIND ;      MyBuff_AI0[ 86  ] = ADCH;
 delay64 ();  MyBuff_ADC[ 87  ] = PIND ;      MyBuff_AI0[ 87  ] = ADCH;
 delay64 ();  MyBuff_ADC[ 88  ] = PIND ;      MyBuff_AI0[ 88  ] = ADCH;
 delay64 ();  MyBuff_ADC[ 89  ] = PIND ;      MyBuff_AI0[ 89  ] = ADCH;
 delay64 ();  MyBuff_ADC[ 90  ] = PIND ;      MyBuff_AI0[ 90  ] = ADCH;
 delay64 ();  MyBuff_ADC[ 91  ] = PIND ;      MyBuff_AI0[ 91  ] = ADCH;
 delay64 ();  MyBuff_ADC[ 92  ] = PIND ;      MyBuff_AI0[ 92  ] = ADCH;
 delay64 ();  MyBuff_ADC[ 93  ] = PIND ;      MyBuff_AI0[ 93  ] = ADCH;
 delay64 ();  MyBuff_ADC[ 94  ] = PIND ;      MyBuff_AI0[ 94  ] = ADCH;
 delay64 ();  MyBuff_ADC[ 95  ] = PIND ;      MyBuff_AI0[ 95  ] = ADCH;
 delay64 ();  MyBuff_ADC[ 96  ] = PIND ;      MyBuff_AI0[ 96  ] = ADCH;
 delay64 ();  MyBuff_ADC[ 97  ] = PIND ;      MyBuff_AI0[ 97  ] = ADCH;
 delay64 ();  MyBuff_ADC[ 98  ] = PIND ;      MyBuff_AI0[ 98  ] = ADCH;
 delay64 ();  MyBuff_ADC[ 99  ] = PIND ;      MyBuff_AI0[ 99  ] = ADCH;
 delay64 ();  MyBuff_ADC[ 100 ] = PIND ;      MyBuff_AI0[ 100 ] = ADCH;
 delay64 ();  MyBuff_ADC[ 101 ] = PIND ;      MyBuff_AI0[ 101 ] = ADCH;
 delay64 ();  MyBuff_ADC[ 102 ] = PIND ;      MyBuff_AI0[ 102 ] = ADCH;
 delay64 ();  MyBuff_ADC[ 103 ] = PIND ;      MyBuff_AI0[ 103 ] = ADCH;
 delay64 ();  MyBuff_ADC[ 104 ] = PIND ;      MyBuff_AI0[ 104 ] = ADCH;
 delay64 ();  MyBuff_ADC[ 105 ] = PIND ;      MyBuff_AI0[ 105 ] = ADCH;
 delay64 ();  MyBuff_ADC[ 106 ] = PIND ;      MyBuff_AI0[ 106 ] = ADCH;
 delay64 ();  MyBuff_ADC[ 107 ] = PIND ;      MyBuff_AI0[ 107 ] = ADCH;
 delay64 ();  MyBuff_ADC[ 108 ] = PIND ;      MyBuff_AI0[ 108 ] = ADCH;
 delay64 ();  MyBuff_ADC[ 109 ] = PIND ;      MyBuff_AI0[ 109 ] = ADCH;
 delay64 ();  MyBuff_ADC[ 110 ] = PIND ;      MyBuff_AI0[ 110 ] = ADCH;
 delay64 ();  MyBuff_ADC[ 111 ] = PIND ;      MyBuff_AI0[ 111 ] = ADCH;
 delay64 ();  MyBuff_ADC[ 112 ] = PIND ;      MyBuff_AI0[ 112 ] = ADCH;
 delay64 ();  MyBuff_ADC[ 113 ] = PIND ;      MyBuff_AI0[ 113 ] = ADCH;
 delay64 ();  MyBuff_ADC[ 114 ] = PIND ;      MyBuff_AI0[ 114 ] = ADCH;
 delay64 ();  MyBuff_ADC[ 115 ] = PIND ;      MyBuff_AI0[ 115 ] = ADCH;
 delay64 ();  MyBuff_ADC[ 116 ] = PIND ;      MyBuff_AI0[ 116 ] = ADCH;
 delay64 ();  MyBuff_ADC[ 117 ] = PIND ;      MyBuff_AI0[ 117 ] = ADCH;
 delay64 ();  MyBuff_ADC[ 118 ] = PIND ;      MyBuff_AI0[ 118 ] = ADCH;
 delay64 ();  MyBuff_ADC[ 119 ] = PIND ;      MyBuff_AI0[ 119 ] = ADCH;
 delay64 ();  MyBuff_ADC[ 120 ] = PIND ;      MyBuff_AI0[ 120 ] = ADCH;
 delay64 ();  MyBuff_ADC[ 121 ] = PIND ;      MyBuff_AI0[ 121 ] = ADCH;
 delay64 ();  MyBuff_ADC[ 122 ] = PIND ;      MyBuff_AI0[ 122 ] = ADCH;
 delay64 ();  MyBuff_ADC[ 123 ] = PIND ;      MyBuff_AI0[ 123 ] = ADCH;
 delay64 ();  MyBuff_ADC[ 124 ] = PIND ;      MyBuff_AI0[ 124 ] = ADCH;
 delay64 ();  MyBuff_ADC[ 125 ] = PIND ;      MyBuff_AI0[ 125 ] = ADCH;
 delay64 ();  MyBuff_ADC[ 126 ] = PIND ;      MyBuff_AI0[ 126 ] = ADCH;
 delay64 ();  MyBuff_ADC[ 127 ] = PIND ;      MyBuff_AI0[ 127 ] = ADCH;
 delay64 ();  MyBuff_ADC[ 128 ] = PIND ;      MyBuff_AI0[ 128 ] = ADCH;
 delay64 ();  MyBuff_ADC[ 129 ] = PIND ;      MyBuff_AI0[ 129 ] = ADCH;
 delay64 ();  MyBuff_ADC[ 130 ] = PIND ;      MyBuff_AI0[ 130 ] = ADCH;
 delay64 ();  MyBuff_ADC[ 131 ] = PIND ;      MyBuff_AI0[ 131 ] = ADCH;
 delay64 ();  MyBuff_ADC[ 132 ] = PIND ;      MyBuff_AI0[ 132 ] = ADCH;
 delay64 ();  MyBuff_ADC[ 133 ] = PIND ;      MyBuff_AI0[ 133 ] = ADCH;
 delay64 ();  MyBuff_ADC[ 134 ] = PIND ;      MyBuff_AI0[ 134 ] = ADCH;
 delay64 ();  MyBuff_ADC[ 135 ] = PIND ;      MyBuff_AI0[ 135 ] = ADCH;
 delay64 ();  MyBuff_ADC[ 136 ] = PIND ;      MyBuff_AI0[ 136 ] = ADCH;
 delay64 ();  MyBuff_ADC[ 137 ] = PIND ;      MyBuff_AI0[ 137 ] = ADCH;
 delay64 ();  MyBuff_ADC[ 138 ] = PIND ;      MyBuff_AI0[ 138 ] = ADCH;
 delay64 ();  MyBuff_ADC[ 139 ] = PIND ;      MyBuff_AI0[ 139 ] = ADCH;
 delay64 ();  MyBuff_ADC[ 140 ] = PIND ;      MyBuff_AI0[ 140 ] = ADCH;
 delay64 ();  MyBuff_ADC[ 141 ] = PIND ;      MyBuff_AI0[ 141 ] = ADCH;
 delay64 ();  MyBuff_ADC[ 142 ] = PIND ;      MyBuff_AI0[ 142 ] = ADCH;
 delay64 ();  MyBuff_ADC[ 143 ] = PIND ;      MyBuff_AI0[ 143 ] = ADCH;
 delay64 ();  MyBuff_ADC[ 144 ] = PIND ;      MyBuff_AI0[ 144 ] = ADCH;
 delay64 ();  MyBuff_ADC[ 145 ] = PIND ;      MyBuff_AI0[ 145 ] = ADCH;
 delay64 ();  MyBuff_ADC[ 146 ] = PIND ;      MyBuff_AI0[ 146 ] = ADCH;
 delay64 ();  MyBuff_ADC[ 147 ] = PIND ;      MyBuff_AI0[ 147 ] = ADCH;
 delay64 ();  MyBuff_ADC[ 148 ] = PIND ;      MyBuff_AI0[ 148 ] = ADCH;
 delay64 ();  MyBuff_ADC[ 149 ] = PIND ;      MyBuff_AI0[ 149 ] = ADCH;
 delay64 ();  MyBuff_ADC[ 150 ] = PIND ;      MyBuff_AI0[ 150 ] = ADCH;
 delay64 ();  MyBuff_ADC[ 151 ] = PIND ;      MyBuff_AI0[ 151 ] = ADCH;
 delay64 ();  MyBuff_ADC[ 152 ] = PIND ;      MyBuff_AI0[ 152 ] = ADCH;
 delay64 ();  MyBuff_ADC[ 153 ] = PIND ;      MyBuff_AI0[ 153 ] = ADCH;
 delay64 ();  MyBuff_ADC[ 154 ] = PIND ;      MyBuff_AI0[ 154 ] = ADCH;
 delay64 ();  MyBuff_ADC[ 155 ] = PIND ;      MyBuff_AI0[ 155 ] = ADCH;
 delay64 ();  MyBuff_ADC[ 156 ] = PIND ;      MyBuff_AI0[ 156 ] = ADCH;
 delay64 ();  MyBuff_ADC[ 157 ] = PIND ;      MyBuff_AI0[ 157 ] = ADCH;
 delay64 ();  MyBuff_ADC[ 158 ] = PIND ;      MyBuff_AI0[ 158 ] = ADCH;
 delay64 ();  MyBuff_ADC[ 159 ] = PIND ;      MyBuff_AI0[ 159 ] = ADCH;
 delay64 ();  MyBuff_ADC[ 160 ] = PIND ;      MyBuff_AI0[ 160 ] = ADCH;
 delay64 ();  MyBuff_ADC[ 161 ] = PIND ;      MyBuff_AI0[ 161 ] = ADCH;
 delay64 ();  MyBuff_ADC[ 162 ] = PIND ;      MyBuff_AI0[ 162 ] = ADCH;
 delay64 ();  MyBuff_ADC[ 163 ] = PIND ;      MyBuff_AI0[ 163 ] = ADCH;
 delay64 ();  MyBuff_ADC[ 164 ] = PIND ;      MyBuff_AI0[ 164 ] = ADCH;
 delay64 ();  MyBuff_ADC[ 165 ] = PIND ;      MyBuff_AI0[ 165 ] = ADCH;
 delay64 ();  MyBuff_ADC[ 166 ] = PIND ;      MyBuff_AI0[ 166 ] = ADCH;
 delay64 ();  MyBuff_ADC[ 167 ] = PIND ;      MyBuff_AI0[ 167 ] = ADCH;
 delay64 ();  MyBuff_ADC[ 168 ] = PIND ;      MyBuff_AI0[ 168 ] = ADCH;
 delay64 ();  MyBuff_ADC[ 169 ] = PIND ;      MyBuff_AI0[ 169 ] = ADCH;
 delay64 ();  MyBuff_ADC[ 170 ] = PIND ;      MyBuff_AI0[ 170 ] = ADCH;
 delay64 ();  MyBuff_ADC[ 171 ] = PIND ;      MyBuff_AI0[ 171 ] = ADCH;
 delay64 ();  MyBuff_ADC[ 172 ] = PIND ;      MyBuff_AI0[ 172 ] = ADCH;
 delay64 ();  MyBuff_ADC[ 173 ] = PIND ;      MyBuff_AI0[ 173 ] = ADCH;
 delay64 ();  MyBuff_ADC[ 174 ] = PIND ;      MyBuff_AI0[ 174 ] = ADCH;
 delay64 ();  MyBuff_ADC[ 175 ] = PIND ;      MyBuff_AI0[ 175 ] = ADCH;
 delay64 ();  MyBuff_ADC[ 176 ] = PIND ;      MyBuff_AI0[ 176 ] = ADCH;
 delay64 ();  MyBuff_ADC[ 177 ] = PIND ;      MyBuff_AI0[ 177 ] = ADCH;
 delay64 ();  MyBuff_ADC[ 178 ] = PIND ;      MyBuff_AI0[ 178 ] = ADCH;
 delay64 ();  MyBuff_ADC[ 179 ] = PIND ;      MyBuff_AI0[ 179 ] = ADCH;
 delay64 ();  MyBuff_ADC[ 180 ] = PIND ;      MyBuff_AI0[ 180 ] = ADCH;
 delay64 ();  MyBuff_ADC[ 181 ] = PIND ;      MyBuff_AI0[ 181 ] = ADCH;
 delay64 ();  MyBuff_ADC[ 182 ] = PIND ;      MyBuff_AI0[ 182 ] = ADCH;
 delay64 ();  MyBuff_ADC[ 183 ] = PIND ;      MyBuff_AI0[ 183 ] = ADCH;
 delay64 ();  MyBuff_ADC[ 184 ] = PIND ;      MyBuff_AI0[ 184 ] = ADCH;
 delay64 ();  MyBuff_ADC[ 185 ] = PIND ;      MyBuff_AI0[ 185 ] = ADCH;
 delay64 ();  MyBuff_ADC[ 186 ] = PIND ;      MyBuff_AI0[ 186 ] = ADCH;
 delay64 ();  MyBuff_ADC[ 187 ] = PIND ;      MyBuff_AI0[ 187 ] = ADCH;
 delay64 ();  MyBuff_ADC[ 188 ] = PIND ;      MyBuff_AI0[ 188 ] = ADCH;
 delay64 ();  MyBuff_ADC[ 189 ] = PIND ;      MyBuff_AI0[ 189 ] = ADCH;
 delay64 ();  MyBuff_ADC[ 190 ] = PIND ;      MyBuff_AI0[ 190 ] = ADCH;
 delay64 ();  MyBuff_ADC[ 191 ] = PIND ;      MyBuff_AI0[ 191 ] = ADCH;
 delay64 ();  MyBuff_ADC[ 192 ] = PIND ;      MyBuff_AI0[ 192 ] = ADCH;
 delay64 ();  MyBuff_ADC[ 193 ] = PIND ;      MyBuff_AI0[ 193 ] = ADCH;
 delay64 ();  MyBuff_ADC[ 194 ] = PIND ;      MyBuff_AI0[ 194 ] = ADCH;
 delay64 ();  MyBuff_ADC[ 195 ] = PIND ;      MyBuff_AI0[ 195 ] = ADCH;
 delay64 ();  MyBuff_ADC[ 196 ] = PIND ;      MyBuff_AI0[ 196 ] = ADCH;
 delay64 ();  MyBuff_ADC[ 197 ] = PIND ;      MyBuff_AI0[ 197 ] = ADCH;
 delay64 ();  MyBuff_ADC[ 198 ] = PIND ;      MyBuff_AI0[ 198 ] = ADCH;
 delay64 ();  MyBuff_ADC[ 199 ] = PIND ;      MyBuff_AI0[ 199 ] = ADCH;
 delay64 ();  MyBuff_ADC[ 200 ] = PIND ;      MyBuff_AI0[ 200 ] = ADCH;
 delay64 ();  MyBuff_ADC[ 201 ] = PIND ;      MyBuff_AI0[ 201 ] = ADCH;
 delay64 ();  MyBuff_ADC[ 202 ] = PIND ;      MyBuff_AI0[ 202 ] = ADCH;
 delay64 ();  MyBuff_ADC[ 203 ] = PIND ;      MyBuff_AI0[ 203 ] = ADCH;
 delay64 ();  MyBuff_ADC[ 204 ] = PIND ;      MyBuff_AI0[ 204 ] = ADCH;
 delay64 ();  MyBuff_ADC[ 205 ] = PIND ;      MyBuff_AI0[ 205 ] = ADCH;
 delay64 ();  MyBuff_ADC[ 206 ] = PIND ;      MyBuff_AI0[ 206 ] = ADCH;
 delay64 ();  MyBuff_ADC[ 207 ] = PIND ;      MyBuff_AI0[ 207 ] = ADCH;
 delay64 ();  MyBuff_ADC[ 208 ] = PIND ;      MyBuff_AI0[ 208 ] = ADCH;
 delay64 ();  MyBuff_ADC[ 209 ] = PIND ;      MyBuff_AI0[ 209 ] = ADCH;
 delay64 ();  MyBuff_ADC[ 210 ] = PIND ;      MyBuff_AI0[ 210 ] = ADCH;
 delay64 ();  MyBuff_ADC[ 211 ] = PIND ;      MyBuff_AI0[ 211 ] = ADCH;
 delay64 ();  MyBuff_ADC[ 212 ] = PIND ;      MyBuff_AI0[ 212 ] = ADCH;
 delay64 ();  MyBuff_ADC[ 213 ] = PIND ;      MyBuff_AI0[ 213 ] = ADCH;
 delay64 ();  MyBuff_ADC[ 214 ] = PIND ;      MyBuff_AI0[ 214 ] = ADCH;
 delay64 ();  MyBuff_ADC[ 215 ] = PIND ;      MyBuff_AI0[ 215 ] = ADCH;
 delay64 ();  MyBuff_ADC[ 216 ] = PIND ;      MyBuff_AI0[ 216 ] = ADCH;
 delay64 ();  MyBuff_ADC[ 217 ] = PIND ;      MyBuff_AI0[ 217 ] = ADCH;
 delay64 ();  MyBuff_ADC[ 218 ] = PIND ;      MyBuff_AI0[ 218 ] = ADCH;
 delay64 ();  MyBuff_ADC[ 219 ] = PIND ;      MyBuff_AI0[ 219 ] = ADCH;
 delay64 ();  MyBuff_ADC[ 220 ] = PIND ;      MyBuff_AI0[ 220 ] = ADCH;
 delay64 ();  MyBuff_ADC[ 221 ] = PIND ;      MyBuff_AI0[ 221 ] = ADCH;
 delay64 ();  MyBuff_ADC[ 222 ] = PIND ;      MyBuff_AI0[ 222 ] = ADCH;
 delay64 ();  MyBuff_ADC[ 223 ] = PIND ;      MyBuff_AI0[ 223 ] = ADCH;
 delay64 ();  MyBuff_ADC[ 224 ] = PIND ;      MyBuff_AI0[ 224 ] = ADCH;
 delay64 ();  MyBuff_ADC[ 225 ] = PIND ;      MyBuff_AI0[ 225 ] = ADCH;
 delay64 ();  MyBuff_ADC[ 226 ] = PIND ;      MyBuff_AI0[ 226 ] = ADCH;
 delay64 ();  MyBuff_ADC[ 227 ] = PIND ;      MyBuff_AI0[ 227 ] = ADCH;
 delay64 ();  MyBuff_ADC[ 228 ] = PIND ;      MyBuff_AI0[ 228 ] = ADCH;
 delay64 ();  MyBuff_ADC[ 229 ] = PIND ;      MyBuff_AI0[ 229 ] = ADCH;
 delay64 ();  MyBuff_ADC[ 230 ] = PIND ;      MyBuff_AI0[ 230 ] = ADCH;
 delay64 ();  MyBuff_ADC[ 231 ] = PIND ;      MyBuff_AI0[ 231 ] = ADCH;
 delay64 ();  MyBuff_ADC[ 232 ] = PIND ;      MyBuff_AI0[ 232 ] = ADCH;
 delay64 ();  MyBuff_ADC[ 233 ] = PIND ;      MyBuff_AI0[ 233 ] = ADCH;
 delay64 ();  MyBuff_ADC[ 234 ] = PIND ;      MyBuff_AI0[ 234 ] = ADCH;
 delay64 ();  MyBuff_ADC[ 235 ] = PIND ;      MyBuff_AI0[ 235 ] = ADCH;
 delay64 ();  MyBuff_ADC[ 236 ] = PIND ;      MyBuff_AI0[ 236 ] = ADCH;
 delay64 ();  MyBuff_ADC[ 237 ] = PIND ;      MyBuff_AI0[ 237 ] = ADCH;
 delay64 ();  MyBuff_ADC[ 238 ] = PIND ;      MyBuff_AI0[ 238 ] = ADCH;
 delay64 ();  MyBuff_ADC[ 239 ] = PIND ;      MyBuff_AI0[ 239 ] = ADCH;
 delay64 ();  MyBuff_ADC[ 240 ] = PIND ;      MyBuff_AI0[ 240 ] = ADCH;
 delay64 ();  MyBuff_ADC[ 241 ] = PIND ;      MyBuff_AI0[ 241 ] = ADCH;
 delay64 ();  MyBuff_ADC[ 242 ] = PIND ;      MyBuff_AI0[ 242 ] = ADCH;
 delay64 ();  MyBuff_ADC[ 243 ] = PIND ;      MyBuff_AI0[ 243 ] = ADCH;
 delay64 ();  MyBuff_ADC[ 244 ] = PIND ;      MyBuff_AI0[ 244 ] = ADCH;
 delay64 ();  MyBuff_ADC[ 245 ] = PIND ;      MyBuff_AI0[ 245 ] = ADCH;
 delay64 ();  MyBuff_ADC[ 246 ] = PIND ;      MyBuff_AI0[ 246 ] = ADCH;
 delay64 ();  MyBuff_ADC[ 247 ] = PIND ;      MyBuff_AI0[ 247 ] = ADCH;
 delay64 ();  MyBuff_ADC[ 248 ] = PIND ;      MyBuff_AI0[ 248 ] = ADCH;
 delay64 ();  MyBuff_ADC[ 249 ] = PIND ;      MyBuff_AI0[ 249 ] = ADCH;
 delay64 ();  MyBuff_ADC[ 250 ] = PIND ;      MyBuff_AI0[ 250 ] = ADCH;
 delay64 ();  MyBuff_ADC[ 251 ] = PIND ;      MyBuff_AI0[ 251 ] = ADCH;
 delay64 ();  MyBuff_ADC[ 252 ] = PIND ;      MyBuff_AI0[ 252 ] = ADCH;
 delay64 ();  MyBuff_ADC[ 253 ] = PIND ;      MyBuff_AI0[ 253 ] = ADCH;
 delay64 ();  MyBuff_ADC[ 254 ] = PIND ;      MyBuff_AI0[ 254 ] = ADCH;
 delay64 ();  MyBuff_ADC[ 255 ] = PIND ;      MyBuff_AI0[ 255 ] = ADCH;
 
  
}






